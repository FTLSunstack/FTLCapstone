{
  "abandonware": {
    "en": {
      "term": "abandonware",
      "def": "Software that is no longer being maintained.\n"
    },
    "es": {
      "term": "abandonware",
      "def": "Software cuyo mantenimiento ha sido abandonado.\n"
    }
  },
  "absolute_error": {
    "en": {
      "term": "absolute error",
      "def": "The absolute value of the difference between the observed and the correct value. Absolute error is usually less useful than [relative error](#relative_error).\n"
    },
    "es": {
      "term": "error absoluto",
      "def": "El valor absoluto de la diferencia entre el valor observado y el valor correcto. El error absoluto suele ser menos útil que el [error relativo](#relative_error).\n"
    }
  },
  "absolute_path": {
    "en": {
      "term": "absolute path",
      "def": "A path that points to the same location in the [filesystem](#filesystem) regardless of where it is evaluated. An absolute path is the equivalent of latitude and longitude in geography.\n"
    },
    "es": {
      "term": "ruta absoluta",
      "def": "Una ruta que dirige a la misma ubicación en el sistema de archivos independientemente del contexto donde sea evaluada. Una ruta absoluta es el equivalente a la latitud y longitud en geografía.\n"
    }
  },
  "absolute_row_number": {
    "en": {
      "term": "absolute row number",
      "def": "The sequential index of a row in a table, regardless of what sections of the table is being displayed.\n"
    },
    "es": {
      "term": "número de fila absoluto",
      "def": "El índice secuencial que indentifica una fila en un tablero, sin importar qué secciones se estén mostrando.\n"
    }
  },
  "abstract_method": {
    "en": {
      "term": "abstract method",
      "def": "In [object-oriented programming](#oop), a [method](#method) that is defined but not implemented. Programmers will define an abstract method in a [parent class](#parent_class) to specify operations that [child classes](#child_class) must provide.\n"
    },
    "es": null
  },
  "abstract_syntax_tree": {
    "en": {
      "term": "abstract syntax tree",
      "acronym": "AST",
      "def": "A deeply nested data structure, or [tree](#tree), that represents the structure of a program. For example, the AST might have a [node](#node) representing a [`while` loop](#while_loop) with one [child](#child_tree) representing the loop condition and another representing the [loop body](#loop_body).\n"
    },
    "es": null
  },
  "actual_result": {
    "en": {
      "term": "actual result (of test)",
      "def": "The value generated by running code in a test. If this matches the [expected result](#expected_result), the test [passes](#pass_test); if the two are different, the test [fails](#fail_test).\n"
    },
    "es": null
  },
  "affordance": {
    "en": {
      "term": "affordance",
      "def": "A property of something that suggests how it can be used, such as a handle or button.\n"
    },
    "es": null
  },
  "aggregation": {
    "en": {
      "term": "aggregation",
      "def": "To combine many values into one, e.g., by summing a set of numbers or concatenating a set of strings.\n"
    },
    "es": {
      "term": "agregación",
      "def": "Combinar muchos valores en uno, por ejemplo, sumando una serie de números o concatenando un conjunto de cadenas de caracteres.\n"
    }
  },
  "aggregation_function": {
    "en": {
      "term": "aggregation function",
      "def": "A function that combines many values into one, such as `sum` or `max`.\n"
    },
    "es": {
      "term": "función de agregación",
      "def": "Una función que combina varios valores en uno, como `sum` o `max`.\n"
    }
  },
  "agile": {
    "en": {
      "term": "agile development",
      "def": "A software development methodology that emphasizes lots of small steps and continuous feedback instead of up-front planning and long-term scheduling. [Exploratory programming](#exploratory_programming) is often agile.\n"
    },
    "es": {
      "term": "desarrollo ágil",
      "def": "Una metodología de desarrollo de software que enfatiza muchos pasos pequeños y feedback continuo en vez de planificación por adelantado y a largo plazo. [Programación exploratoria](#exploratory_programming) suele ser ágil.\n"
    }
  },
  "algorithm": {
    "en": {
      "term": "algorithm",
      "def": "An algorithm is a set of steps, intructions, or rules to be followed to accomplish a specific task. In computer science, an algorithm is a set of instructions in a computer program that solves a computational problem.\n"
    },
    "es": {
      "term": "algoritmo",
      "def": "Un algortimo es un conjunto de pasos, instrucciones o reglas que se han de seguir para llevar a cabo una tarea específica. En informática, un algoritmo es un conjunto de instrucciones en un programa informático que resuelve un problema computacional.\n"
    }
  },
  "aliasing": {
    "en": {
      "term": "aliasing",
      "def": "To have two or more references to the same thing, such as a data structure in memory or a file on disk.\n"
    },
    "es": null
  },
  "anchor": {
    "en": {
      "term": "anchor",
      "def": "In a [regular expression](#regular_expression), a symbol that fixes a position without matching characters. `^` matches the start of the line, while `$` matches the end of the line and `\\b` matches a break between word and non-word characters.\n"
    },
    "es": {
      "term": "ancla",
      "def": "En una [expresión regular](#regular_expression), el símbolo que fija una posición sin coincidir con caracteres. `^` coincide con un inicio de línea, `$` con el final y `\\b` con un límite de palabra.\n"
    }
  },
  "anonymous_function": {
    "en": {
      "term": "anonymous function",
      "def": "A function that has not been assigned a name. Anonymous functions are usually quite short, and are usually defined where they are used, e.g., as callbacks. In [Python](#python), these are called lambda functions and are created through use of the lambda reserved word.\n"
    },
    "es": {
      "term": "Función anónima",
      "def": "Es una función que no tiene asignado un nombre. Las funciones anónimas son usualmente cortas, y se definen en el mismo lugar donde son utilizadas, por ejemplo: en callbacks. En [Python](#python), estas funciones se conocen como funciones lambda y son creadas con el uso de la palabra reservada lambda.\n"
    }
  },
  "anti_join": {
    "en": {
      "term": "anti join",
      "def": "A [join](#join) that keeps rows from table A whose keys do *not* match keys in table B.\n"
    },
    "es": {
      "term": "anti join",
      "def": "Una [unión](#join) que conserva las filas de la tabla A cuyas claves *no* coinciden con las de la tabla B.\n"
    }
  },
  "api": {
    "en": {
      "term": "Application Programming Interface",
      "acronym": "API",
      "def": "A set of functions and procedures provided by one software library or web service through which another application can communicate with it. An API is not the code, the database, or the server: it's the access point.\n"
    },
    "es": {
      "term": "Interfaz de Programación de Aplicaciones",
      "def": "Un conjunto de funciones y procedimientos proporcionados por una libreria de software o servicio web atraves del cual otra aplicación se puede comunicar. Una API no es el código, la base de datos o el servidor; es el punto de acceso.\n"
    }
  },
  "append_mode": {
    "en": {
      "term": "append mode",
      "def": "To add data to the end of an existing file instead of overwriting the previous contents of that file. Overwriting is the default, so most programming languages require programs to be explicit about wanting to append instead.\n"
    },
    "es": null
  },
  "argument": {
    "en": {
      "term": "argument",
      "def": "The term should not be confused with, and is not a synonym for, [parameter](#parameter). An argument is one of possibly several expressions that are passed to a function. It is the actual value that is passed. Parameters and arguments are distinct, but related concepts. Parameters are variables and arguments are the values assigned to those variables.\n"
    },
    "es": {
      "term": "argumento",
      "def": "Un valor pasado a una función. Algunos autores usan el término como sinónimo de [parámetro](#parameter) y algunos no; Todo es muy confuso.\n"
    }
  },
  "arithmetic_mean": {
    "en": {
      "term": "arithmetic mean",
      "def": "See [mean](#mean). Calculated from a set of n numbers by summing those  numbers, and dividing the result by n. See [mean](#mean).\n"
    },
    "es": {
      "term": "media aritmética",
      "def": "Ver [media](#mean).\n"
    }
  },
  "ascii": {
    "en": {
      "term": "ASCII",
      "def": "A standard way to represent the characters commonly used in the Western European languages as 7- or 8-[bit](#bit) integers, now superseded by [Unicode](#unicode).\n"
    },
    "es": {
      "term": "ASCII",
      "def": "Manera estándar de representar los caracteres comúnmente usados en lenguajes de Europa Occidental como enteros de 7- u 8-[bits](#bit), ahora reemplazado por [Unicode](#unicode).\n"
    }
  },
  "assertion": {
    "en": {
      "term": "assertion",
      "def": "A [Boolean](#boolean) expression that must be [true](#true) at a certain point in a program. Assertions may be built into the language (e.g., [Python](#python)'s `assert` statement) or provided as functions (e.g., [R](#r_language)'s `stopifnot`). They are often used in testing, but are also put in [production code](#production_code) to check that it is behaving correctly. In many languages, assertions should not be used to perform data validation as they may be silently dropped by compilers and interpreters under optimization conditions. Using assertions for data validation can therefore introduce security risks. Unlike many languages, R does not have an `assert` statement which can be disabled, and so use of a [package](#package) such as `assertr` for data validation does not create security holes.\n"
    },
    "es": null
  },
  "associative_array": {
    "en": {
      "term": "associative array",
      "def": "See [dictionary](#dictionary).\n"
    },
    "es": null
  },
  "asynchronous": {
    "en": {
      "term": "asynchronous",
      "def": "Not happening at the same time. In programming, an asynchronous operation is one that runs independently of another, or that starts at one time and ends at another.\n"
    },
    "es": {
      "term": "asincrónico",
      "def": "No sucediendo al mismo tiempo. En programación, una operación asincrónica es una que corre independientemente de otra, o que comienza en un tiempo y termina en otro.\n"
    }
  },
  "attribute": {
    "en": {
      "term": "attribute",
      "def": "A name-value pair associated with an object, used to store metadata about the object such as an array's dimensions.\n"
    },
    "es": null
  },
  "auto_completion": {
    "en": {
      "term": "auto-completion",
      "def": "A feature that allows the user to finish a word or code quickly by pressing the TAB key to list possible words or code from which the user can select.\n"
    },
    "es": null
  },
  "automatic_variable": {
    "en": {
      "term": "automatic variable",
      "def": "A variable that is automatically given a value in a [build rule](#build_rule). For example, Make automatically assigns the name of a rule's [target](#build_target) to the automatic variable `$@`. Automatic variables are frequently used when writing [pattern rules](#pattern_rule).\n"
    },
    "es": null
  },
  "backpropagation": {
    "en": {
      "term": "backpropagation",
      "def": "An algorithm that iteratively adjusts the weights used in a [neural network](#neural_network). Backpropagation is often used to implement [gradient descent](#gradient_descent).\n"
    },
    "es": null
  },
  "backward_compatible": {
    "en": {
      "term": "backward-compatible",
      "def": "A property of a system, hardware or software, that allows for interoperability with an older legacy system, or with input designed for such a system. For example a [function](#function) written in [Python](#python) 3 that can be run successfully with Python version 2 is backward-compatible.\n"
    },
    "es": null
  },
  "base_r": {
    "en": {
      "term": "base R",
      "def": "The basic functions making up the [R](#r_language) language. The base packages can be found in `src/library` and are not updated outside of R; their version numbers follow R version numbering. Base packages are installed and loaded with R, while priority packages are installed with base R but must be loaded prior to use.\n"
    },
    "es": {
      "term": "R base",
      "def": "Funciones básicas que conforman el lenguaje de programación [R](#r_language). Los paquetes base pueden encontrarse en `src/library` y no son actualizados fuera de R; su número de versión coincide con el de R. Los paquetes de R base se instalan y cargan junto con R, mientras que los paquetes prioritarios se instalan con R, pero deben ser cargados antes de utilizarse.\n"
    }
  },
  "bayes_rule": {
    "en": {
      "term": "Bayes' Rule",
      "def": "See [Bayes' Theorem](#bayes_theorem).\n"
    },
    "es": null
  },
  "bayes_theorem": {
    "en": {
      "term": "Bayes' Theorem",
      "def": "An equation for calculating the probability that something is [true](#true) if something related to it is true. If P(X) is the probability that X is true and P(X|Y) is the probability that X is true given Y is true, then P(X|Y) = P(Y|X) * P(X) / P(Y).\n"
    },
    "es": {
      "term": "Teorema de Bayes",
      "def": "Una ecuación para calcular la probabilidad de que algo sea [verdadero](#true) si algo     relacionado con ello es verdadero. Si P(X) es la probabilidad de que X is verdadero y P(X|Y) es     la probabilidad de que X es verdadero dado que Y sea verdadero, entonces P(X|Y) = P(Y|X) * P(X) / P(Y).\n"
    }
  },
  "bayesian_network": {
    "en": {
      "term": "Bayesian network",
      "def": "A graph that represents the relationships between random variables for a given problem.\n"
    },
    "es": {
      "term": "Red Bayesiana",
      "def": "Un grafo que representa la relacion entre las variables aleatorias para un determinado problema.\n"
    }
  },
  "bias": {
    "en": {
      "term": "bias",
      "def": "A statistic is biased if it is systematically or consistently different from the parameter it is supposed to estimate.\n"
    },
    "es": {
      "term": "sesgo",
      "def": "Un estadístico está sesgado si es sistemática o consistentemente diferente del parámetro que se supone que debe estimar.\n"
    }
  },
  "big_data": {
    "en": {
      "term": "big data",
      "def": "Any data that until recently was too big for most people to work with on a single computer.\n"
    },
    "es": null
  },
  "binary": {
    "en": {
      "term": "binary",
      "def": "A system which can have one of two possible states. In computing often represented as being in the state 0 or 1. Represented in [Boolean](#boolean) logic as [false](#false) (0) or [true](#true) (1). Computers are built upon systems which store 0s and 1s as [bits](#bit).\n"
    },
    "es": {
      "term": "sistema binario",
      "def": "Un sistema donde puede haber dos posibilidades de estado. En la computación, el sistema binario se representa con el estado de 0 ó 1. En el sistema lógico [Booleano](#boolean), [falso](#false) se representa con (0) y [verdadero](#true) con (1). Las computadoras operan en sistemas  binarios donde almacenan [bits](#bit).\n"
    }
  },
  "binary_expression": {
    "en": {
      "term": "binary expression",
      "def": "An expression which has two parameters and takes two arguments, such as `1 + 2`.\n"
    },
    "es": null
  },
  "binomial_distribution": {
    "en": {
      "term": "binomial distribution",
      "def": "A [probability distribution](#probability_distribution) that arises when there are a fixed number of trials, each of which can produce one of two outcomes, and the probability of those outcomes does not change. As the number of trials increases, the binomial distribution approximates a [normal distribution](#normal_distribution).\n"
    },
    "es": null
  },
  "bit": {
    "en": {
      "term": "bit",
      "def": "A unit of information representing alternatives, yes/no, [true](#true)/[false](#false). In computing a state of either 0 or 1.\n"
    },
    "es": {
      "term": "bit",
      "def": "Unidad de información representando alternativas si/no, [verdadero](#true)/[falso](#false). En computación, un estado de ser 0 ó 1.\n"
    }
  },
  "blob": {
    "en": {
      "term": "binary large object",
      "acronym": "BLOB",
      "def": "Data that is stored in a database without being interpreted in any way, such as an audio file. The term is also now used to refer to data transferred over a network or stored in a [version control](#version_control_system) [repository](#repository) as uninterpreted bits.\n"
    },
    "es": null
  },
  "block_comment": {
    "en": {
      "term": "block comment",
      "def": "A [comment](#comment) that spans multiple lines. Block comments may be marked with special start and end symbols, like `/*` and `*/` in C and its descendents, or each line may be prefixed with a marker like `#`.\n"
    },
    "es": null
  },
  "boilerplate": {
    "en": {
      "term": "boilerplate",
      "def": "Standard text that is included in legal contracts, licenses, and so on. Also parts of the source code that have to be repeated very often to get basic functionality. In [object-oriented programs](#oop) these segments are used to encapsulate variables of objects. Some languages require a lot of these statements and are termed boilerplate languages, e.g. Java, which means that they are frequently generated automatically or by using [auto-completion](#auto_completion).\n"
    },
    "es": null
  },
  "boolean": {
    "en": {
      "term": "Boolean",
      "def": "Relating to a variable or data type that can have either a logical value of [true](#true) or [false](#false). Named for George Boole, a 19th century mathematician. Binary systems, like all computers, are built on this foundation of systems of logical evaluations between states of true and false, 1 or 0.\n"
    },
    "es": {
      "term": "Booleano",
      "def": "Relacionado a una variable o tipo de dato que puede tomar un valor lógico. Un valor lógico puede ser [verdadero](#true) o [falso](#false). El termino \"booleano\" viene en honor a George Boole, un matematico del siglo XIX. El concepto del computador esta fundamentado en el sistema binario, en el qual se evalua entre estados de verdedero o falso.\n"
    }
  },
  "branch": {
    "en": {
      "term": "branch",
      "def": "See [Git branch](#git_branch).\n"
    },
    "es": null
  },
  "branch_per_feature_workflow": {
    "en": {
      "term": "branch-per-feature workflow",
      "def": "A common strategy for managing work with [Git](#git) and other [version control systems](#version_control_system) in which a separate [branch](#git_branch) is created for work on each new feature or each [bug](#bug) fix and merged when that work is completed. This isolates changes from one another until they are completed.\n"
    },
    "es": null
  },
  "breadcrumbs": {
    "en": {
      "term": "breadcrumbs",
      "def": "A set of supplementary navigational links included in many websites, usually placed at the top of the page. Breadcrumbs show the users where the current page lies in the website; the term comes from a fairy tale in which children left a trail of breadcrumbs behind themselves so that they could find their way home.\n"
    },
    "es": {
      "term": "guías de navegación",
      "def": "Literalmente: “migas,” “migas de pan,” “migaja;” en esto contexto: “árbol de navegación,” “guías de navegación,” “navegación de migas,“ o “rastro de navegación.” Un grupo de enlaces de navegación incluidos en muchos sitios web, generalmente ubicados en la parte superior de una página. “Breadcrumbs” muestran a los usuarios dónde se encuentra la página en el sitio web; la palabra proviene de un cuento de hadas en que unos niños habían dejado atrás un rastro de migas de pan para que pudieran encontrar su camino a casa.\n"
    }
  },
  "breadth_first": {
    "en": {
      "term": "breadth first",
      "def": "To go through a nested data structure such as a [tree](#tree) by exploring all of one level, then going on to the next level and so on, or to explore a problem by examining the first step of each possible solution, and then trying the next step for each.\n"
    },
    "es": null
  },
  "browser_cache": {
    "en": {
      "term": "browser cache",
      "def": "A place where web browsers keep copies of previously retrieved files (web pages, data files) in order to save time when they're requested again. Sometimes, issues may arise if there is a newer version of the file online, but the browser doesn't notice it.\n"
    },
    "es": null
  },
  "bug": {
    "en": {
      "term": "bug",
      "def": "A missing or undesirable [feature](#feature_software) of a piece of software; the digital equivalent of a weed.\n"
    },
    "es": null
  },
  "bug_report": {
    "en": {
      "term": "bug report",
      "def": "A collection of files, [logs](#log), or related information that describes either an unexpected output of some code or program, or an unexpected error or warning. This information is used to help find and fix a [bug](#bug) in the program or code.\n"
    },
    "es": null
  },
  "bug_tracker": {
    "en": {
      "term": "bug tracker",
      "def": "A system that tracks and manages [reported bugs](#bug_report) for a software program, to make it easier to address and fix the [bugs](#bug).\n"
    },
    "es": null
  },
  "build_manager": {
    "en": {
      "term": "build manager",
      "def": "A program that keeps track of how files depend on one another and runs commands to update any files that are out-of-date. Build managers were invented to [compile](#compile) only those parts of programs that had changed, but are now often used to implement workflows in which plots depend on results files, which in turn depend on raw data files or configuration files.\n"
    },
    "es": null
  },
  "build_recipe": {
    "en": {
      "term": "build recipe",
      "def": "The part of a [build rule](#build_rule) that describes how to update something that has fallen out-of-date.\n"
    },
    "es": null
  },
  "build_rule": {
    "en": {
      "term": "build rule",
      "def": "A specification for a [build manager](#build_manager) that describes how some files depend on others and what to do if those files are out-of-date.\n"
    },
    "es": null
  },
  "build_stale": {
    "en": {
      "term": "stale (in build)",
      "def": "To be out-of-date compared to a [prerequisite](#prerequisite). A [build manager](#build_manager)'s job is to find and update things that are stale.\n"
    },
    "es": null
  },
  "build_target": {
    "en": {
      "term": "build target",
      "def": "The file(s) that a [build rule](#build_rule) will update if they are out-of-date compared to their [dependencies](#dependency).\n"
    },
    "es": null
  },
  "byte": {
    "en": {
      "term": "byte",
      "def": "A unit of digital information that typically consists of eight [binary](#binary) digits, or [bits](#bit).\n"
    },
    "es": {
      "term": "byte",
      "def": "Unidad de información digital que típicamente consiste de ocho dígitos [binarios](#binary), o [bits](#bit).\n"
    }
  },
  "byte_code": {
    "en": {
      "term": "byte code",
      "def": "A set of instructions designed to be executed efficiently by an [interpreter](#interpreter).\n"
    },
    "es": null
  },
  "cache": {
    "en": {
      "term": "cache",
      "def": "Something that stores copies of data so that future requests for it can be satisfied more quickly. The CPU in a computer uses a hardware cache to hold recently-accessed values; many programs rely on a software cache to reduce network traffic and latency. Figuring out when something in a cache is out-of-date and should be replaced is one of the [two hard problems in computer science](#two_hard_problems).\n"
    },
    "es": null
  },
  "caching": {
    "en": {
      "term": "caching",
      "def": "To save a copy of some data in a local [cache](#cache) to make future access faster.\n"
    },
    "es": {
      "term": "caching",
      "def": "Guardar una copia de algún dato en el [caché](#cache) local para hacer su acceso futuro más rápido.\n"
    }
  },
  "call_stack": {
    "en": {
      "term": "call stack",
      "def": "A data structure that stores information about the active subroutines executed.\n"
    },
    "es": null
  },
  "callback": {
    "en": {
      "term": "callback function",
      "def": "A function A that is passed to another function B so that B can call it at some later point. Callbacks can be used [synchronously](#synchronous), as in generic functions like `map` that invoke a callback function once for each element in a collection, or [asynchronously](#asynchronous), as in a [client](#client) that runs a callback when a [response](#http_response) is received in answer to a [request](#http_request).\n"
    },
    "es": null
  },
  "camel_case": {
    "en": {
      "term": "camel case",
      "def": "A style of writing code that involves naming variables and objects with no space, underscore (`_`), dot (`.`), or dash (`-`) characters, with each word being capitalized. Examples include `CalculateSum` and `findPattern`.\n"
    },
    "es": null
  },
  "catch_exception": {
    "en": {
      "term": "catch (an exception)",
      "def": "To accept responsibility for handling an error or other unexpected event. [R](#r_language) prefers \"handling a condition\" to \"catching an exception.\" [Python](#python), on the other hand, encourages raising and catching exceptions, and in some situations, requires it.\n"
    },
    "es": null
  },
  "causation": {
    "en": {
      "term": "causation",
      "def": "A relationship between distinct events, where it is asserted that one event is responsible for producing or affecting change in the other.\n"
    },
    "es": null
  },
  "cc_0": {
    "en": {
      "term": "CC-0",
      "def": "A [Creative Commons](#cc_license) [license](#license) that imposes no restrictions whatsover, thereby putting a work in the public domain.\n"
    },
    "es": {
      "term": "CC-0",
      "def": "Una [licencia](#license) de [Creative Commons](#cc_license) que no impone ninguna restricción, por lo que pone a la obra en dominio público.\n"
    }
  },
  "cc_by": {
    "en": {
      "term": "CC-BY",
      "def": "The [Creative Commons](#cc_license) - Attribution [license](#license) that requires people to give credit to the author of a work, but imposes no other restrictions.\n"
    },
    "es": null
  },
  "cc_license": {
    "en": {
      "term": "Creative Commons license",
      "def": "A set of [licenses](#license) that can be applied to published work. Each license is formed by concatenating one or more of `-BY` (Attribution): users must cite the original source; `-SA` (ShareAlike): users must share their own work under a similar license; `-NC` (NonCommercial): work may not be used for commercial purposes without the creator's permission; `-ND` (NoDerivatives): no derivative works (e.g., translations) can be created without the creator's permission. Thus, `CC-BY-NC` means \"users must give attribution and cannot use commercially without permission.\" The term `CC-0` (zero, not letter 'O') is sometimes used to mean \"no restrictions,\" i.e., the work is in the public domain.\n"
    },
    "es": null
  },
  "centroid": {
    "en": {
      "term": "centroid",
      "def": "The center or anchor of a group created by a [clustering](#clustering) algorithm.\n"
    },
    "es": null
  },
  "character_encoding": {
    "en": {
      "term": "character encoding",
      "def": "A specification of how characters are stored as bytes. The most commonly-used encoding today is [UTF-8](#utf_8).\n"
    },
    "es": {
      "term": "codificación de caracteres",
      "def": "Especificación sobre cómo los caracteres están guardados como bytes. En la actualidad, la codificación más utilizada es [UTF-8](#utf_8).\n"
    }
  },
  "chi_square_test": {
    "en": {
      "term": "chi-square test",
      "def": "A statistical method for estimating whether two variables in a cross tabulation are [correlated](#correlation). A chi-square distribution varies from a [normal distribution](#normal_distribution) based on the [degrees of freedom](#degrees_of_freedom) used to calculate it.\n"
    },
    "es": null
  },
  "child_class": {
    "en": {
      "term": "child class",
      "def": "In [object-oriented programming](#oop), a [class](#class) derived from another class (called the [parent class](#parent_class)).\n"
    },
    "es": {
      "term": "subclase",
      "def": "En [programación orientada a objetos](#oop), es la extensión de otra clase (denominada [superclase](#parent_class)).\n"
    }
  },
  "child_tree": {
    "en": {
      "term": "child (in a tree)",
      "def": "A [node](#node) in a [tree](#node) that is below another node (call the [parent](#parent_tree)).\n"
    },
    "es": null
  },
  "class": {
    "en": {
      "term": "class",
      "def": "In [object-oriented programming](#oop), a structure that combines data and operations (called [methods](#method)). The program then uses a [constructor](#constructor) to create an [object](#object) with those properties and methods. Programmers generally put generic or reusable behavior in [parent classes](#parent_class), and more detailed or specific behavior in [child classes](#child_class).\n"
    },
    "es": {
      "term": "clase",
      "def": "En [programación orientada a objetos](#oop), es una estructura que combina datos y operaciones (denominadas [métodos](#method)). El programa emplea un [constructor](#constructor) para crear un [objeto](#object) con esas propiedades y métodos. Los programadores generalmente definen comportamientos genéricos o reutilizables en [superclases](#parent_class) y comportamientos más específicos o detallados en [subclases](#child_class).\n"
    }
  },
  "classification": {
    "en": {
      "term": "classification",
      "def": "The process of identifying which predefined category an item belongs to, such as deciding whether an email message is spam or not. Many [machine learning](#machine_learning) algorithms perform classification.\n"
    },
    "es": null
  },
  "cli": {
    "en": {
      "term": "command-line interface",
      "def": "A user interface that relies solely on text for commands and output, typically running in a [shell](#shell).\n"
    },
    "es": null
  },
  "client": {
    "en": {
      "term": "client",
      "def": "Typically, a program such as a web browser that gets data from a [server](#server) and displays it to, or interacts with, users. The term is used more generally to refer to any program A that makes requests of another program B. A single program can be both a client and a server.\n"
    },
    "es": null
  },
  "closure": {
    "en": {
      "term": "closure",
      "def": "A set of variables defined in the same [scope](#scope) whose existence has been preserved after that scope has ended.\n"
    },
    "es": null
  },
  "clustering": {
    "en": {
      "term": "clustering",
      "def": "The process of dividing data into groups when the groups themselves are not known in advance.\n"
    },
    "es": null
  },
  "code_coverage": {
    "en": {
      "term": "code coverage (in testing)",
      "def": "How much of a [library](#library) or program is executed when tests run. This is normally reported as a percentage of lines of code: for example, if 40 out of 50 lines in a file are run during testing, those tests have 80% code coverage.\n"
    },
    "es": null
  },
  "code_review": {
    "en": {
      "term": "code review",
      "def": "To check a program or a change to a program by inspecting its source code.\n"
    },
    "es": {
      "term": "revisión de código",
      "def": "Revisar un programa o un cambio a un programa inspeccionando su código fuente.\n"
    }
  },
  "coercion": {
    "en": {
      "term": "coercion",
      "def": "See [type coercion](#type_coercion).\n"
    },
    "es": null
  },
  "cognitive_load": {
    "en": {
      "term": "cognitive load",
      "def": "The amount of working memory needed to accomplish a set of simultaneous tasks.\n"
    },
    "es": null
  },
  "command": {
    "en": {
      "term": "command",
      "def": "An instruction telling a computer program to perform a specific task.\n"
    },
    "es": null
  },
  "command_history": {
    "en": {
      "term": "command history",
      "def": "An automatically created list of previously executed commands. Most read-eval-print loops ([REPLs](#repl)), including the [Unix shell](#shell), record history and allow users to play back recent commands.\n"
    },
    "es": null
  },
  "command_line_argument": {
    "en": {
      "term": "command-line argument",
      "def": "A filename or control flag given to a command-line program when it is run.\n"
    },
    "es": null
  },
  "comment": {
    "en": {
      "term": "comment",
      "def": "Text written in a script that is not treated as code to be run, but rather as text that describes what the code is doing. These are usually short notes, often beginning with a `#` (in many programming languages).\n"
    },
    "es": null
  },
  "commit": {
    "en": {
      "term": "commit",
      "def": "As a verb, the act of saving a set of changes to a database or [version control](#version_control_system) [repository](#repository). As a noun, the changes saved.\n"
    },
    "es": null
  },
  "commit_message": {
    "en": {
      "term": "commit message",
      "def": "A comment attached to a [commit](#commit) that explains what was done and why.\n"
    },
    "es": null
  },
  "compile": {
    "en": {
      "term": "compile",
      "def": "To translate textual source into another form. Programs in [compiled languages](#compiled_language) are translated into machine instructions for a computer to run, and [Markdown](#markdown) is usually translated into [HTML](#html) for display.\n"
    },
    "es": null
  },
  "compiled_language": {
    "en": {
      "term": "compiled language",
      "def": "Originally, a language such as C or Fortran that is translated into machine instructions for execution. Languages such as Java are also compiled before execution, but into [byte code](#byte_code) instead of machine instructions, while [interpreted languages](#interpreted_language) like [Python](#python) are compiled to byte code on the fly.\n"
    },
    "es": null
  },
  "compiler": {
    "en": {
      "term": "compiler",
      "def": "An application that translates programs written in some languages into machine instructions or [byte code](#byte_code).\n"
    },
    "es": null
  },
  "computational_linguistics": {
    "en": {
      "term": "computational linguistics",
      "def": "The study or application of computational methods for [parsing](#parse) or understanding human languages. Early approaches were algorithmic; most modern approaches are statistical.\n"
    },
    "es": {
      "term": "lingüística computacional",
      "def": "El estudio o aplicación de métodos computacionales para procesamiento o entendimiento de lenguajes humanos. Los primeros acercamientos fueron algorítmicos; la mayoría de los acercamientos modernos son estadísticos.\n"
    }
  },
  "computational_notebook": {
    "en": {
      "term": "computational notebook",
      "def": "A combination of a document format that allows users to mix prose and code in a single file, and an application that executes that code interactively and in place. The [Jupyter Notebook](#jupyter_notebook) and [R Markdown](#r_markdown) files are both examples of computational notebooks.\n"
    },
    "es": null
  },
  "condition": {
    "en": {
      "term": "condition",
      "def": "An error or other unexpected event that disrupts the normal flow of control.\n"
    },
    "es": null
  },
  "conditional_expression": {
    "en": {
      "term": "conditional expression",
      "def": "A [ternary expression](#ternary_expression) that serves the role of an if/else statement. For example, C and similar languages use the syntax `test : ifTrue ? ifFalse` to mean \"choose the value `ifTrue` if `test` is true, or the value `ifFalse` if it is not.\"\n"
    },
    "es": null
  },
  "confidence_interval": {
    "en": {
      "term": "confidence interval",
      "def": "A range around an estimate that indicates the margin of error, combined with a probability that the actual value falls in that range.\n"
    },
    "es": null
  },
  "configuration file": {
    "en": {
      "term": "configuration file",
      "def": "A file that specifies the parameters and initial settings of a software program. Configuration, or config, files are often used for information subject to changes, such as environment-specific settings.\n"
    },
    "es": null
  },
  "console": {
    "en": {
      "term": "console",
      "def": "A computer terminal where a user may enter commands, or a program, such as a shell that simulates such a device.\n"
    },
    "es": null
  },
  "constant": {
    "en": {
      "term": "constant",
      "def": "A value that cannot be changed after it has been defined, as opposed  to a [variable](#variable_program)."
    },
    "es": null
  },
  "constructor": {
    "en": {
      "term": "constructor",
      "def": "A function that creates an [object](#object) of a particular [class](#class). In the [S3](#s3) object system, constructors are a convention rather than a requirement.\n"
    },
    "es": {
      "term": "constructor",
      "def": "Una función que crea un [objeto](#object) de una [clase](#class) particular. En el sistema de objetos de [S3](#s3), los constructores son más una convención que un requisito.\n"
    }
  },
  "continuation_prompt": {
    "en": {
      "term": "continuation prompt",
      "def": "A [prompt](#prompt) that indicates that the command currently being typed is not yet complete, and will not be run until it is.\n"
    },
    "es": null
  },
  "continuous_integration": {
    "en": {
      "term": "continuous integration",
      "def": "A software development practice in which changes are automatically merged as soon as they become available.\n"
    },
    "es": null
  },
  "continuous_random_variable": {
    "en": {
      "term": "continuous random variable",
      "def": "A [variable](#variable_data) whose value can be any real value, either within a range, or unbounded, such as age or distance.\n"
    },
    "es": null
  },
  "control_flow": {
    "en": {
      "term": "control flow",
      "def": "The logical flow through a program's code. May be linear (i.e. just a series of commands), but may also include [loops](#loop) or conditional execution (i.e. if a condition is met).\n"
    },
    "es": null
  },
  "copy_on_modify": {
    "en": {
      "term": "copy-on-modify",
      "def": "The practice of creating a new copy of aliased data whenever there is an attempt to modify it so that each reference will believe theirs is the only one.\n"
    },
    "es": null
  },
  "correlation": {
    "en": {
      "term": "correlation",
      "def": "A measure of how well two variables agree with each other. Correlation is usually measured by calculating a [correlation coefficient](#correlation_coefficient), and does not imply [causation](#causation).\n"
    },
    "es": null
  },
  "correlation_coefficient": {
    "en": {
      "term": "correlation coefficient",
      "def": "A measure of how well-[correlated](#correlation) two variables are. If the [correlation coefficient](#correlation_coefficient) between X and Y is 1.0, knowing X allows perfect prediction of Y. If the correlation coefficient is 0.0, knowing X tells you nothing about Y, and if it is -1.0, then X predicts Y, but a change in X causes an opposite change in Y.\n"
    },
    "es": null
  },
  "covariance": {
    "en": {
      "term": "covariance",
      "def": "How well two variables agree with each other. The [correlation coefficient](#correlation_coefficient) is a normalized measure of covariance.\n"
    },
    "es": null
  },
  "cpu": {
    "en": {
      "term": "Central Processing Unit",
      "acronym": "CPU",
      "def": "The principal hardware of any digital computer. The CPU constitutes the essential electronic circuitry that interprets and executes instructions from the software or other hardware. Also called a central processor, main processor, or microprocessor.\n"
    },
    "es": null
  },
  "cran": {
    "en": {
      "term": "Comprehensive R Archive Network",
      "acronym": "CRAN",
      "def": "A public repository of [R](#r_language) packages.\n"
    },
    "es": null
  },
  "cross_join": {
    "en": {
      "term": "cross join",
      "def": "A [join](#join) that produces all possible combinations of rows from two tables.\n"
    },
    "es": null
  },
  "cross_validation": {
    "en": {
      "term": "cross-validation",
      "def": "A technique that divides data into [training data](t#raining_data) and [test data](#test_data). The training data and correct answers are used to find [parameters](#parameter), and the algorithm's effectiveness is then measured by examining the answers it gives on the test data.\n"
    },
    "es": null
  },
  "cryptographic_hash_function": {
    "en": {
      "term": "cryptographic hash function",
      "def": "A [hash function](#hash_function) that produces an apparently-random value for any input.\n"
    },
    "es": null
  },
  "css": {
    "en": {
      "term": "Cascading Style Sheets",
      "acronym": "CSS",
      "def": "A way to control the appearance of HTML. CSS is typically used to specify fonts, colors, and layout.\n"
    },
    "es": null
  },
  "csv": {
    "en": {
      "term": "comma-separated values",
      "acronym": "CSV",
      "def": "A text format for tabular data in which each [record](#record) is one row and [fields](#field) are separated by commas. There are many minor variations, particularly around quoting of [strings](#string).\n"
    },
    "es": null
  },
  "current_working_directory": {
    "en": {
      "term": "current working directory",
      "def": "The [folder](#folder) or [directory](#directory) location in which the program operates. Any action taken by the program occurs relative to this directory.\n"
    },
    "es": null
  },
  "data_engineer": {
    "en": {
      "term": "data engineer",
      "def": "Someone who sets up and runs data analyses. Data engineers are often responsible for installing software, managing databases, generating reports, and archiving results.\n"
    },
    "es": null
  },
  "data_engineering": {
    "en": {
      "term": "data engineering",
      "def": "The pragmatic steps taken to make data usable, such as writing short programs to put mailing addresses in a uniform format.\n"
    },
    "es": null
  },
  "data_frame": {
    "en": {
      "term": "data frame",
      "def": "A two-dimensional data structure for storing tabular data in memory. Rows represent [records](#record) and columns represent [variables](#variable_data).\n"
    },
    "es": {
      "term": "marco de datos",
      "def": "Una estructura de datos bi-dimensional para guardar datos tabulares en memoria. Líneas representan [entradas](#record) y columnas representan [variables](#variable_data).\n"
    }
  },
  "data_mining": {
    "en": {
      "term": "data mining",
      "def": "The use of computers to search for patterns in large datasets. The term [data science](#data_science) is now more commonly used.\n"
    },
    "es": null
  },
  "data_package": {
    "en": {
      "term": "data package",
      "def": "A software package that, mostly, contains only data. Is used to make it simpler to disseminate data for easier use.\n"
    },
    "es": null
  },
  "data_science": {
    "en": {
      "term": "data science",
      "def": "The combination of statistics, programming, and hard work used to extract knowledge from data.\n"
    },
    "es": {
      "term": "ciencia de datos",
      "def": "La combinación de estadísticas, programación y trabajo duro que se utiliza para extraer información de los datos.\n"
    }
  },
  "data_scientist": {
    "en": {
      "term": "data scientist",
      "def": "Someone who uses programming skills to solve statistical problems.\n"
    },
    "es": {
      "term": "cientifico/cientifica de datos",
      "def": "Alguien que usa habilidades de programación para resolver problemas de estadísticas.\n"
    }
  },
  "data_structure": {
    "en": {
      "term": "data structure",
      "def": "A format for the organisation, management, and efficient access of data. Typically it will characterise a set of data values and their representation (or [encoding](#character_encoding)), the relationships between values, and ways to access or manipulate those data, such as reading, altering, or writing.\n"
    },
    "es": null
  },
  "data_wrangling": {
    "en": {
      "term": "data wrangling",
      "def": "A colloquial name for small-scale [data engineering](#data_engineering).\n"
    },
    "es": null
  },
  "decision_tree": {
    "en": {
      "term": "decision tree",
      "def": "A tree whose [nodes](#node) are questions and whose [branches](#branch) eventually lead to a decision or [classification](#classification).\n"
    },
    "es": null
  },
  "decorator_pattern": {
    "en": {
      "term": "Decorator pattern",
      "def": "A [design pattern](#design_pattern) in which a function adds additional features to another function or a [class](#class) after its initial definition. Decorators are a feature of [Python](#python) and can be implemented in most other languages as well.\n"
    },
    "es": null
  },
  "decrement": {
    "en": {
      "term": "decrement",
      "def": "A unary operation that decreases the value of a variable, usually by 1.\n"
    },
    "es": {
      "term": "decrementar",
      "def": "Una operación unaria que disminuye el valor de una variable, generalmente en 1.\n"
    }
  },
  "deep_learning": {
    "en": {
      "term": "deep learning",
      "def": "A family of [neural network](#neural_network) algorithms that use multiple layers to extract features at successively higher levels.\n"
    },
    "es": null
  },
  "default_target": {
    "en": {
      "term": "default target",
      "def": "The [build target](#build_target) that is used when none is specified explicitly.\n"
    },
    "es": null
  },
  "default_value": {
    "en": {
      "term": "default value",
      "def": "A value assigned to a function [parameter](#parameter) when the caller does not specify a value. Default values are specified as part of the function's definition.\n"
    },
    "es": null
  },
  "defensive_programming": {
    "en": {
      "term": "defensive programming",
      "def": "A set of programming practices that assumes mistakes will happen and either reports or corrects them, such as inserting [assertions](#assertion) to report situations that are not ever supposed to occur.\n"
    },
    "es": null
  },
  "degrees_of_freedom": {
    "en": {
      "term": "degrees of freedom",
      "def": "In statistics, the degrees of freedom (often \"DF\") is a measure of how much independent information, in the form data and calculations, has been combined to produce a given statistical parameter. Put another way, the DF is the number of values that are free to vary in the calculation of a given statistical parameter. For a statistic calculated from data which are indepdendent (i.e., the values are uncorrelated), the DF can be generally estimated as the sample size minus the number of individual parameters calculated to obtain the final statistic.\n"
    },
    "es": null
  },
  "delegate_pattern": {
    "en": {
      "term": "Delegate pattern",
      "def": "A [design pattern](#design_pattern) in which an [object](#object) does most of the work to complete a task, but uses one of a set of other objects to complete some specific parts of the work. Delegation is often used instead of inheritance to customize objects' behavior.\n"
    },
    "es": null
  },
  "dependency": {
    "en": {
      "term": "dependency",
      "def": "See [prerequisite](#prerequisite).\n"
    },
    "es": null
  },
  "dependent_variable": {
    "en": {
      "term": "dependent variable",
      "def": "A variable whose value depends on the value of another variable, which is called the [independent variable](#independent_variable).\n"
    },
    "es": null
  },
  "depth_first": {
    "en": {
      "term": "depth first",
      "def": "To go through a nested data structure such as a [tree](#tree) by going as far as possible down one path, then as far as possible down the next and so on, or to explore a problem by following one solution to its conclusion and then trying the next.\n"
    },
    "es": null
  },
  "design_pattern": {
    "en": {
      "term": "design pattern",
      "def": "A recurring pattern in software design that is specific enough to be worth naming, but not so specific that a single best implementation can be provided by a [library](#library). For example, [data frames](#data_frame) and database [tables](#table) are instances of the same pattern.\n"
    },
    "es": null
  },
  "destructuring_assignment": {
    "en": {
      "term": "destructuring assignment",
      "def": "Unpacking values from data structures and assigning them to multiple variables in a single statement.\n"
    },
    "es": null
  },
  "dictionary": {
    "en": {
      "term": "dictionary",
      "def": "A data structure that allows items to be looked up by value, sometimes called an [associative array](#associative_array). Dictionaries are often implemented using [hash tables](#hash_table).\n"
    },
    "es": null
  },
  "dimension_reduction": {
    "en": {
      "term": "dimension reduction",
      "def": "Reducing the number of dimensions in a dataset, typically by finding the dimensions along which it varies most.\n"
    },
    "es": null
  },
  "directory": {
    "en": {
      "term": "directory",
      "def": "An item within a [filesystem](#filesystem) that can contain files and other directories. Also known as a [folder](#folder).\n"
    },
    "es": null
  },
  "discrete_random_variable": {
    "en": {
      "term": "discrete random variable",
      "def": "A [variable](#variable_data) whose value can take on only one of a fixed set of values, such as [true](#true) or [false](#false).\n"
    },
    "es": null
  },
  "distro": {
    "en": {
      "term": "distro",
      "def": "See [software distribution](#software_distribution).\n"
    },
    "es": null
  },
  "docstring": {
    "en": {
      "term": "docstring",
      "def": "Short for \"documentation string,\" a string appearing at the start of a module, class, or function in [Python](#python) that automatically becomes that object's documentation.\n"
    },
    "es": null
  },
  "documentation_generator": {
    "en": {
      "term": "documentation generator",
      "def": "A software tool that extracts specially formatted comments or [dostrings](#docstring) from code and generates cross-referenced developer documentation.\n"
    },
    "es": null
  },
  "doi": {
    "en": {
      "term": "Digital Object Identifier",
      "acronym": "DOI",
      "def": "A unique persistent identifier for a book, paper, report, dataset, software release, or other digital artefact.\n"
    },
    "es": null
  },
  "dom": {
    "en": {
      "term": "Document Object Model",
      "acronym": "DOM",
      "def": "A standard, in-memory representation of [HTML](#html) and [XML](#xml). Each [element](#element) is stored as a [node](#node) in a [tree](#tree) with a set of named [attributes](#attribute); contained elements are [child nodes](#child_tree). Modern programming languages provide many [libraries](#library) for searching and modifying the DOM.\n"
    },
    "es": null
  },
  "dom_selector": {
    "en": {
      "term": "DOM selector",
      "def": "A pattern that identifies [nodes](#node) in a [DOM](#dom) [tree](#tree). For example, `#alpha` matches nodes whose `id` [attribute](#attribute) is \"alpha\", while `.beta` matches nodes whose `class` [attribute](#attribute) is \"beta\".\n"
    },
    "es": null
  },
  "domain_knowledge": {
    "en": {
      "term": "domain knowledge",
      "def": "Understanding of a specific problem domain, e.g., knowledge of transportation logistics.\n"
    },
    "es": null
  },
  "double": {
    "en": {
      "term": "double",
      "def": "Short for \"double-precision floating-point number\", meaning a 64-bit numeric value with a fractional part and an exponent.\n"
    },
    "es": null
  },
  "double_square_brackets": {
    "en": {
      "term": "double square brackets",
      "def": "An index enclosed in `[[...]]`, used to return a single value of the underlying type.\n"
    },
    "es": null
  },
  "down_vote": {
    "en": {
      "term": "down-vote",
      "def": "A vote against something.\n"
    },
    "es": null
  },
  "dry": {
    "en": {
      "term": "Don't Repeat Yourself principle",
      "acronym": "DRY",
      "def": "The Don't Repeat Yourself (DRY) principle states that — Every piece of knowledge must have a single, unambiguous, authoritative representation within a system. The term comes from The Pragmatic Programmer, by Andrew Hunt and David Thomas. Programs that follow the DRY Principle avoid duplication of definitions and logic, so that a change in their behaviour only requires each modification to be made in one part of the code. The goal is to create code that is easier to maintain.\n"
    },
    "es": null
  },
  "dynamic_loading": {
    "en": {
      "term": "dynamic loading",
      "def": "To [import](#import) a [module](#module) into the memory of a program while it is already running. Most [interpreted languages](#interpreted_language) use dynamic loading, and provide tools so that programs can find and load modules dynamically to configure themselves.\n"
    },
    "es": null
  },
  "dynamic_lookup": {
    "en": {
      "term": "dynamic lookup",
      "def": "To find a function or a property of an [object](#object) by name while a program is running. For example, instead of getting a specific property of an object using `obj.name`, a program might use `obj[someVariable]`, where `someVariable` could hold `\"name\"` or some other property name.\n"
    },
    "es": null
  },
  "dynamic_scoping": {
    "en": {
      "term": "dynamic scoping",
      "def": "To find the value of a [variable](#variable_program) by looking at what is on the [call stack](#call_stack) at the moment the lookup is done. Almost all programming languages use [lexical_scoping](#lexical_scoping) instead, since it is more predictable.\n"
    },
    "es": null
  },
  "edge": {
    "en": {
      "term": "edge",
      "def": "A connection between two [nodes](#node) in a [graph](#graph). An edge may have data associated with it, such as a name or distance.\n"
    },
    "es": null
  },
  "element": {
    "en": {
      "term": "element",
      "def": "A named component in an [HTML](#html) or [XML](#xml) document. Elements are usually written `<name>`...`</name>`, where \"...\" represents the content of the element. Elements often have [attributes](#attribute).\n"
    },
    "es": null
  },
  "emacs": {
    "en": {
      "term": "Emacs (editor)",
      "def": "A text editor that is popular among Unix programmers.\n"
    },
    "es": null
  },
  "empty_element": {
    "en": {
      "term": "empty element",
      "def": "An [element](#element) of an [HTML](#html) or [XML](#xml) document that has no [children](#child_tree). Empty elements can always be written as `<name></name>`, but may also be written using the shorthand notation `<name/>` (with a slash after the name inside the angle brackets).\n"
    },
    "es": null
  },
  "empty_vector": {
    "en": {
      "term": "empty vector",
      "def": "A vector that contains no elements. Empty vectors have a type such as logical or character, and are *not* the same as [null](#null).\n"
    },
    "es": null
  },
  "environment": {
    "en": {
      "term": "environment",
      "def": "A structure that stores a set of variable names and the values they refer to.\n"
    },
    "es": null
  },
  "error_handling": {
    "en": {
      "term": "error handling",
      "def": "What a program does to detect and correct for errors. Examples include printing a message and using a default configuration if the user-specified configuration cannot be found.\n"
    },
    "es": null
  },
  "error_test": {
    "en": {
      "term": "error (in a test)",
      "def": "Signalled when something goes wrong in a [unit test](#unit_test) itself rather than in the system being tested. In this case, we do not know anything about the correctness of the system.\n"
    },
    "es": null
  },
  "escape_sequence": {
    "en": {
      "term": "escape sequence",
      "def": "A sequence of characters added as a prefix to some other character that would otherwise have a special meaning, temporarily altering the meaning of the character. For example, the escape sequence `\\\"` is used to represent a double-quote character inside a double-quoted string.\n"
    },
    "es": null
  },
  "evaluation": {
    "en": {
      "term": "evaluation",
      "def": "The process of taking an expression such as `1+2*3/4` and turning it into a single, irreducible value.\n"
    },
    "es": null
  },
  "exception": {
    "en": {
      "term": "exception",
      "def": "An object that stores information about an error or other unusual event in a program. One part of a program will create and [raise an exception](#raise_exception) to signal that something unexpected has happened; another part will [catch](#catch_exception) it.\n"
    },
    "es": null
  },
  "exception_handler": {
    "en": {
      "term": "exception handler",
      "def": "A piece of code that deals with an [exception](#exception) after it is [caught](#catch_exception), e.g., by writing a [log message](#log_message), retrying the operation that failed, or performing an alternate operation.\n"
    },
    "es": null
  },
  "expected_result": {
    "en": {
      "term": "expected result (of test)",
      "def": "The value that a piece of software is supposed to produce when tested in a certain way, or the state in which it is supposed to leave the system.\n"
    },
    "es": null
  },
  "exploratory_programming": {
    "en": {
      "term": "exploratory programming",
      "def": "A software development methodology in which requirements emerge or change as the software is being written, often in response to results from early runs.\n"
    },
    "es": {
      "term": "programación exploratoria",
      "def": "Un método de desarrollo de software en el cual los requerimientos emergen o cambian a medida que el software es escrito, frecuentemente en respuesta a resultados de corridas previas.\n"
    }
  },
  "export": {
    "en": {
      "term": "export",
      "def": "To make something visible outside a [module](#module) so that other parts of a program can [import](#import) it. In most languages a module must export things explicitly in an attempt to avoid [name collision](#name_collision).\n"
    },
    "es": null
  },
  "fail_test": {
    "en": {
      "term": "fail (a test)",
      "def": "A test fails if the [actual result](#actual_result) does not match the [expected result](#expected_result).\n"
    },
    "es": null
  },
  "false": {
    "en": {
      "term": "false",
      "def": "The logical ([Boolean](#boolean)) state opposite of \"[true](#true)\". Used in logic and programming to represent a [binary](#binary) state of something.\n"
    },
    "es": null
  },
  "falsy": {
    "en": {
      "term": "falsy",
      "def": "Evaluating to [false](#false) in a [Boolean](#boolean) context.\n"
    },
    "es": null
  },
  "faq": {
    "en": {
      "term": "Frequently Asked Questions",
      "acronym": "FAQ",
      "def": "A curated list of questions commonly asked about a subject, along with answers.\n"
    },
    "es": null
  },
  "feature_branch": {
    "en": {
      "term": "feature branch",
      "def": "A [branch](#branch) within a [Git](#git) [repository](#repository) containing [commits](#commit) dedicated to a specific feature, e.g., a [bug](#bug) fix or a new function. This branch can be merged into another branch.\n"
    },
    "es": null
  },
  "feature_data": {
    "en": {
      "term": "feature (in data)",
      "def": "A variable or observable in a dataset.\n"
    },
    "es": null
  },
  "feature_engineering": {
    "en": {
      "term": "feature engineering",
      "def": "The process of choosing the variables to be used as inputs to a [model](#model). Choosing good features often depends on [domain knowledge](#domain_knowledge).\n"
    },
    "es": null
  },
  "feature_request": {
    "en": {
      "term": "feature request",
      "def": "A request to the maintainers or developers of a software program to add a specific functionality (a feature) to that program.\n"
    },
    "es": null
  },
  "feature_software": {
    "en": {
      "term": "feature (in software)",
      "def": "Some aspect of software that was deliberately designed or built. A [bug](#bug) is an undesired feature.\n"
    },
    "es": null
  },
  "field": {
    "en": {
      "term": "field",
      "def": "A component of a [record](#record) containing a single value. Every record in a [tibble](#tibble) or database [table](#table) has the same fields.\n"
    },
    "es": null
  },
  "filename_extension": {
    "en": {
      "term": "filename extension",
      "def": "The last part of a filename, usually following the '.' symbol. Filename extensions are commonly used to indicate the type of content in the file, though there is no guarantee that this is correct.\n"
    },
    "es": null
  },
  "filename_stem": {
    "en": {
      "term": "filename stem",
      "def": "The part of the filename that does not include the [extension](#filename_extension). For example, the stem of `glossary.yml` is `glossary`.\n"
    },
    "es": null
  },
  "filesystem": {
    "en": {
      "term": "filesystem",
      "def": "The part of the [operating system](#operating_system) that manages how files are stored and retrieved. Also used to refer to all of those files and [directories](#directory) or the specific way they are stored (as in \"the Unix filesystem\").\n"
    },
    "es": {
      "term": "sistema de archivos",
      "def": "La parte del sistema operativo que administra cómo se almacenan y recuperan los archivos. También se usa para referirse a todos esos archivos y directorios o a la forma específica en que se almacenan (como en \"el sistema de archivos Unix\").\n"
    }
  },
  "filter": {
    "en": {
      "term": "filter",
      "def": "As a verb, to choose a set of [records](#record) (i.e., rows of a table) based on the values they contain. As a noun, a command-line program that reads lines of text from files or [standard input](#stdin), performs some operation on them (such as filtering), and writes to a file or [stdout](#stdout).\n"
    },
    "es": null
  },
  "fixture": {
    "en": {
      "term": "fixture",
      "def": "The thing on which a test is run, such as the [parameters](#parameter) to the function being tested or the file being processed.\n"
    },
    "es": null
  },
  "folder": {
    "en": {
      "term": "folder",
      "def": "Another term for a [directory](#directory).\n"
    },
    "es": {
      "term": "carpeta",
      "def": "Otro término para hacer referencia a un [directorio](#directory).\n"
    }
  },
  "for_loop": {
    "en": {
      "term": "for loop",
      "def": "A construct in a program that repeats one or more other statements (the [loop body](#loop_body)) once for each item in a sequence, such as each number in a range or each element of a list.\n"
    },
    "es": null
  },
  "fork": {
    "en": {
      "term": "fork",
      "def": "A copy of one person's [Git](#git) [repository](#repository) that lives in another person's GitHub account. Changes to the content of a fork can be submitted to the [upstream repository](#upstream_repository) via a [pull request](#pull_request).\n"
    },
    "es": null
  },
  "full_identifier_git": {
    "en": {
      "term": "full identifier (of a commit)",
      "def": "A unique 160-bit identifier for a [commit](#commit) in a [Git](#git) [repository](#repository), usually written as a 20-character [hexadecimal](#hexadecimal) character [string](#string).\n"
    },
    "es": null
  },
  "full_join": {
    "en": {
      "term": "full join",
      "def": "A [join](#join) that returns all rows and all columns from two tables A and B. Where the [keys](#key) of A and B match, values are combined; where they do not, missing values from either table are filled with [null](#null), [NA](#na), or some other [missing value](#missing_value) signifier.\n"
    },
    "es": null
  },
  "fully_qualified_name": {
    "en": {
      "term": "fully-qualified name",
      "def": "An unambiguous name of the form `package::thing`, indicating the original source of the [object](#object) in question.\n"
    },
    "es": null
  },
  "function": {
    "en": {
      "term": "function",
      "def": "A code block which gathers a sequence of operations into a whole, preserving it for ongoing use by defining a set of tasks that takes zero or more required and optional arguments as inputs and returns expected outputs (return values), if any. Functions enable repeating these defined tasks with one command, known as a function call.\n"
    },
    "es": null
  },
  "functional_programming": {
    "en": {
      "term": "functional programming",
      "def": "A style of programming in which data is transformed through successive application of functions, rather than by using control structures such as loops. In functional programming, there must be a direct relationship between the input to a function and the output produced by the function, meaning the result should not be affected by the current values of global variables or other parts of the [global program state](#global_environment). It also requires that functions do not produce [side effects](#side_effect), meaning they do not modify the global program state, or do anything other than computing the return value, such as writing output to a [log](#log) file, or printing to the [console](#console).\n"
    },
    "es": null
  },
  "generator_function": {
    "en": {
      "term": "generator function",
      "def": "A function whose state is automatically saved when it returns a value so that execution can be restarted from that point the next time it is called. One example of generator functions use is to produce streams of values that can be processed by [for loops](#for_loop).\n"
    },
    "es": null
  },
  "generic_function": {
    "en": {
      "term": "generic function",
      "def": "A collection of functions with similar purpose, each operating on a different class of data.\n"
    },
    "es": {
      "term": "función genérica",
      "def": "Un conjunto de funciones con propósitos similares, cada una operando en una clase diferente de datos.\n"
    }
  },
  "geometric_mean": {
    "en": {
      "term": "Geometric Mean",
      "def": "Calculated from a set of n numbers by first computing the product of those numbers, and then computing the n-th [root](#root_math) of the result. In  contrast to the [arithmetic mean](#arithmetic_mean), which measures  central tendancy in an \"additive\" way, the geometric mean measures central tendancy in a \"multiplicative\" way, and hence is often appropriate when  estimating an average rates of change or some other multiplicative  constant. \n"
    },
    "es": null
  },
  "ggplot2": {
    "en": {
      "term": "ggplot2",
      "def": "A [package](#package) in [R](#r_language) that implements a layered grammar of graphics for generating plots. It is a popular alternative to plotting with [base R](#base_r) and part of the [tidyverse](#tidyverse).\n"
    },
    "es": null
  },
  "git": {
    "en": {
      "term": "Git",
      "def": "A [version control tool](#version_control_system) to record and manage changes to a project.\n"
    },
    "es": null
  },
  "git_branch": {
    "en": {
      "term": "Git branch",
      "def": "A snapshot of a version of a [Git](#git) [repository](#repository). Multiple branches can capture multiple versions of the same repository.\n"
    },
    "es": null
  },
  "git_clone": {
    "en": {
      "term": "Git clone",
      "def": "Copies (and usually downloads) of a [Git](#git) [remote repository](#remote_repository) on a local computer.\n"
    },
    "es": null
  },
  "git_conflict": {
    "en": {
      "term": "Git conflict",
      "def": "A situation in which incompatible or overlapping changes have been made on different [branches](#branch) that are now being [merged](#git_merge).\n"
    },
    "es": null
  },
  "git_fork": {
    "en": {
      "term": "Git fork",
      "def": "To make a new copy of a [Git](#git) [repository](#repository) on a [server](#server), or the copy that is made.\n"
    },
    "es": null
  },
  "git_merge": {
    "en": {
      "term": "Git merge",
      "def": "Merging branches in [Git](#git) incorporates development histories of two [branches](#branch) in one. If changes are made to similar parts of the branches on both branches, a [conflict](#git_conflict) will occur and this must be resolved before the merge will be completed.\n"
    },
    "es": null
  },
  "git_pull": {
    "en": {
      "term": "Git pull",
      "def": "Downloads and synchronizes changes between a [remote repository](#remote_repository) and a local [repository](#repository).\n"
    },
    "es": null
  },
  "git_push": {
    "en": {
      "term": "Git push",
      "def": "Uploads and synchronizes changes between a local [repository](#repository) and a [remote repository](#remote_repository).\n"
    },
    "es": null
  },
  "git_remote": {
    "en": {
      "term": "Git remote",
      "def": "A short name for a [remote repository](#remote_repository) (like a bookmark).\n"
    },
    "es": null
  },
  "github": {
    "en": {
      "term": "GitHub",
      "def": "A cloud-based platform built around [Git](#git) that allows you to save versions of your project online and collaborate with other Git users.\n"
    },
    "es": null
  },
  "global_environment": {
    "en": {
      "term": "global environment",
      "def": "The [environment](#environment) that holds top-level definitions in a programming language, e.g., those written directly in the interpreter.\n"
    },
    "es": null
  },
  "global_installation": {
    "en": {
      "term": "global installation",
      "def": "Installing a package in a location where it can be accessed by all users and projects.\n"
    },
    "es": {
      "term": "instalación global",
      "def": "El acto de instalar un paquete en una ubicación donde pueda ser accedido por todas las usuarias y proyectos.\n"
    }
  },
  "global_variable": {
    "en": {
      "term": "global variable",
      "def": "A variable defined outside any particular function or [package](#package) namespace, which is therefore visible to all functions.\n"
    },
    "es": {
      "term": "variable global",
      "def": "Una variable definida fuera de alguna función en particular, por lo que es visible para todas las funciones.\n"
    }
  },
  "globbing": {
    "en": {
      "term": "globbing",
      "def": "To specify a set of filenames using a simplified form of [regular expressions](#regular_expression), such as `*.dat` to mean \"all files whose names end in `.dat`\". The name is derived from \"global\".\n"
    },
    "es": null
  },
  "gnu": {
    "en": {
      "term": "GNU Operating System",
      "acronym": "GNU",
      "def": "\"GNU\" is an [operating system](#operating_system) that is free software. GNU is a recursive acronym for \"GNU is Not Unix!\". The GNU operating system consists of GNU [packages](#package) as well as free software realeased by third parties.\n"
    },
    "es": null
  },
  "gpl": {
    "en": {
      "term": "GNU Public License",
      "acronym": "GPL",
      "def": "A [license](#license) that allows people to re-use software as long as they distribute the source of their changes.\n"
    },
    "es": null
  },
  "gradient_boosting": {
    "en": {
      "term": "gradient boosting",
      "def": "A [machine learning](#machine_learning) technique that produces an ensemble of weak prediction models (typically [decision trees](#decision_tree)) in a stepwise fashion.\n"
    },
    "es": null
  },
  "gradient_descent": {
    "en": {
      "term": "gradient descent",
      "def": "An optimization algorithm that repeatedly calculates the gradient at the current point takes a small step in the direction in which the gradient is decreasing, and then recalculates the gradient.\n"
    },
    "es": null
  },
  "graph": {
    "en": {
      "term": "graph",
      "def": "1. A plot or a chart that displays data, or 2. a data structure in which [nodes](#node) are connected to one another by [edges](#edge).\n"
    },
    "es": null
  },
  "group": {
    "en": {
      "term": "group",
      "def": "To divide data into subsets according to a set of criteria while leaving records in a single structure.\n"
    },
    "es": null
  },
  "gui": {
    "en": {
      "term": "graphical user interface",
      "acronym": "GUI",
      "def": "A user interface that relies on windows, menus, pointers, and other graphical elements, as opposed to a [command-line interface](#cli) or voice-driven interface.\n"
    },
    "es": null
  },
  "handle_condition": {
    "en": {
      "term": "handle (condition)",
      "def": "To accept responsibility for handling an error or other unexpected event. [R](#r_language) prefers \"handling a condition\" to \"[catching an exception](catch_exception)\". [Python](#python), on the other hand, encourages raising and catching exceptions, and in some situations, requires it.\n"
    },
    "es": null
  },
  "hardware": {
    "en": {
      "term": "hardware",
      "acronym": "HW",
      "def": "Any physical component of a computer system. Hardware can be internal, such as CPU, memory, and graphics cards; or external, such as monitors and keyboards. Hardware operates in conjunction with software to produce a functioning computer system.\n"
    },
    "es": null
  },
  "harmonic_mean": {
    "en": {
      "term": "Harmonic Mean",
      "def": "Calculated from a set of n numbers by first computing the sum of the  [reciprocals](#reciprocal) of those numbers, and then dividing n by the  resulting sum. Alternatively, it can be computed as the  [reciprocal](#reciprocal) of the [arithmetic mean](#arithmetic_mean) of  the [reciprocal](#reciprocal) values. Similarly to the  [geometric mean](#geometric_mean), the harmonic mean is often used as an  alternative measure of central tendancy to the usual  [arithmetic mean](#arithmetic_mean) when estimating an average rates of  change or some other multiplicative constant. For a set of positive  numbers that are not all equal, the min < HM < GM < AM < max where min is  the minimum value, max is the maximum value, and HM GM and AM are the  harmonic, [geometric](#geometric_mean), and [arithmetic](#arithmetic_mean) means respectively.\n"
    },
    "es": null
  },
  "hash_function": {
    "en": {
      "term": "hash function",
      "def": "A function that turns arbitrary data into a bit array, or a [key](#key), of a fixed size. Hash functions are used to determine where data should be stored in a [hash table](#hash_table).\n"
    },
    "es": null
  },
  "hash_table": {
    "en": {
      "term": "hash table",
      "def": "A data structure that calculates a pseudo-random key (location) for each value passed to it and stores the value in that location. Hash tables enable fast lookup for arbitrary data. This occurs at the cost of extra memory because hash tables must always be larger than the amount of information they need to store, to avoid the possibility of data collisions, when the hash function returns the same key for two different values.\n"
    },
    "es": null
  },
  "header_row": {
    "en": {
      "term": "header row",
      "def": "If present, the first row of a data file that defines column names (but not their data types or units).\n"
    },
    "es": null
  },
  "heterogeneous": {
    "en": {
      "term": "heterogeneous",
      "def": "Containing mixed data types. For example, in [Python](#python) and [R](#r_language), a [list](#list) can contain a mix of numbers, character strings, and values of other types.\n"
    },
    "es": null
  },
  "hexadecimal": {
    "en": {
      "term": "hexadecimal",
      "def": "A base-16 number system. Hexadecimal values are usually written using the digits 0-9 and the characters A-F in either upper or lower case. Hexadecimal is often used to represent [binary](#binary) values, since two hexadecimal digits use exactly one byte of storage.\n"
    },
    "es": null
  },
  "higher_order_function": {
    "en": {
      "term": "higher-order function",
      "def": "A function that operates on other functions. For example, the higher-order function `map` executes a given function once on each value in a [list](#list). Higher-order functions are heavily used in [functional programming](#functional_programming).\n"
    },
    "es": null
  },
  "hippocratic_license": {
    "en": {
      "term": "Hippocratic License",
      "def": "An ethical software [license](#license) that allows free use for any purpose that does not contravene the Universal Declaration of Human Rights.\n"
    },
    "es": null
  },
  "histogram": {
    "en": {
      "term": "histogram",
      "def": "A graphical representation of the distribution of a set of numeric data, usually a vertical bar graph.\n"
    },
    "es": null
  },
  "hitchhiker": {
    "en": {
      "term": "hitchhiker",
      "def": "Someone who is part of a project but does not actually do any work on it.\n"
    },
    "es": null
  },
  "home_directory": {
    "en": {
      "term": "home directory",
      "def": "A directory that contains a user's files. Each user on a multi-user computer will have their own home directory; a personal computer will often only have one home directory.\n"
    },
    "es": null
  },
  "homogeneous": {
    "en": {
      "term": "homogeneous",
      "def": "Containing a single data type. For example, a [vector](#vector) must be homogeneous: its values must all be numeric, logical, etc.\n"
    },
    "es": null
  },
  "html": {
    "en": {
      "term": "HyperText Markup Language",
      "acronym": "HTML",
      "def": "The standard [markup language](#markup_language) used for web pages. HTML is represented in memory using [DOM](#dom) (Digital Object Model).\n"
    },
    "es": null
  },
  "http": {
    "en": {
      "term": "HyperText Transfer Protocol",
      "acronym": "HTTP",
      "def": "The standard [protocol](#protocol) for data transfer on the World-Wide Web. HTTP defines the format of [requests](#http_request) and [responses](#http_response), the meanings of standard error codes, and other features.\n"
    },
    "es": null
  },
  "http_header": {
    "en": {
      "term": "HTTP header",
      "def": "A key-value pair at the top of an [HTTP](#http) [request](#http_request) or [response](#http_response) that carries additional information such as the user's preferred language or the length of the data being transferred.\n"
    },
    "es": null
  },
  "http_request": {
    "en": {
      "term": "HTTP request",
      "def": "A message sent from a [client](#client) to a [server](#server) using the [HTTP](#http) [protocol](#protocol) asking for data. A request usually asks for a web page, image, or other data.\n"
    },
    "es": null
  },
  "http_response": {
    "en": {
      "term": "HTTP response",
      "def": "A reply sent from a [server](#server) to a [client](#client) using the [HTTP](#http) [protocol](#protocol) in response to a [request](#http_request). The response usually contains a web page, image, or data.\n"
    },
    "es": null
  },
  "ide": {
    "en": {
      "term": "Integrated Development Environment",
      "acronym": "IDE",
      "def": "An application that helps programmers develop software. IDEs typically have a built-in editor, a [console](#console) to execute code immediately, and browsers for exploring data structures in memory and files on disk.\n"
    },
    "es": {
      "term": "Entorno de Desarrollo Integrado",
      "acronym": "EDI",
      "def": "Una aplicación que ayuda a programadores a desarrollar software. Los EDI usualmente tiene un editor incorporado, una consola que ejecuta el código inmediatamente y navegadores para explorar estructuras de datos en la memoria y archivos en el disco.\n"
    }
  },
  "import": {
    "en": {
      "term": "import",
      "def": "To bring things from a [module](#module) into a program for use. In most languages a program can only import things that the module explicitly [exports](#export).\n"
    },
    "es": {
      "term": "importar",
      "def": "traer cosas de un [módulo](#module) para incorporarlas al programa. En la mayoría de las lenguajes, un programa solo puede importar cosas que el módulo [exporta](#export) explícitamente.\n"
    }
  },
  "impostor_syndrome": {
    "en": {
      "term": "impostor syndrome",
      "def": "The [false](#false) belief that one's successes are a result of accident or luck rather than ability.\n"
    },
    "es": null
  },
  "in_place_operator": {
    "en": {
      "term": "in-place operator",
      "def": "An operator that updates one of its operands. For example, the expression `x += 2` uses the in-place operator `+=` to add 2 to the current value of `x` and assign the result back to `x`.\n"
    },
    "es": null
  },
  "increment": {
    "en": {
      "term": "increment",
      "def": "A unary operation that increases the value of a variable, usually by 1.\n"
    },
    "es": {
      "term": "incrementar",
      "def": "Una operación unaria que aumenta el valor de una variable, generalmente en 1.\n"
    }
  },
  "independent_variable": {
    "en": {
      "term": "independent variable",
      "def": "The factor that you purposely change or control in order to see what effect  it has on the [dependent variable](#dependent_variable).\n"
    },
    "es": null
  },
  "infinite_loop": {
    "en": {
      "term": "infinite loop",
      "def": "A loop where the exit condition is never met, so the loop continues to repeat itself. Often a programming error.\n"
    },
    "es": null
  },
  "inner_join": {
    "en": {
      "term": "inner join",
      "def": "A [join](#join) that returns the combination of rows from two tables, A and B, whose [keys](#key) exist in both tables.\n"
    },
    "es": null
  },
  "instance": {
    "en": {
      "term": "instance",
      "def": "An [object](#object) of a particular [class](#class).\n"
    },
    "es": null
  },
  "integration_test": {
    "en": {
      "term": "integration test",
      "def": "A test that checks whether the parts of a system work properly when put together.\n"
    },
    "es": null
  },
  "interpreted_language": {
    "en": {
      "term": "interpreted language",
      "def": "A high-level language that is not executed directly by the computer, but instead is run by an [interpreter](#interpreter) that translates program instructions into machine commands on the fly.\n"
    },
    "es": null
  },
  "interpreter": {
    "en": {
      "term": "interpreter",
      "def": "A program whose job it is to run programs written in a high-level [interpreted language](#interpreted_language). Interpreters can run interactively, but may also execute commands saved in a file.\n"
    },
    "es": null
  },
  "invariant": {
    "en": {
      "term": "invariant",
      "def": "Something that must be [true](#true) at all times inside of a program or during the [lifecycle](#lifecycle) of an [object](#object). Invariants are often expressed using [assertions](#assertion). If an invariant expression is not true, this is indicative of a problem, and may result in failure or early termination of the program.\n"
    },
    "es": null
  },
  "iso_date_format": {
    "en": {
      "term": "ISO date format",
      "def": "An international for formatting dates. While the full standard is complex, the most common form is `YYYY-MM-DD`, i.e., a four-digit year, a two-digit month, and a two-digit day, separated by hyphens.\n"
    },
    "es": null
  },
  "issue": {
    "en": {
      "term": "issue",
      "def": "A [bug report](#bug_report), feature request, or other to-do item associated with a project. Also called a [ticket](#ticket).\n"
    },
    "es": null
  },
  "issue_label": {
    "en": {
      "term": "label (an issue)",
      "def": "A short textual tag associated with an [issue](#issue) to categorize it. Common labels include [`bug`](#bug) and `feature request`.\n"
    },
    "es": null
  },
  "issue_tracking_system": {
    "en": {
      "term": "issue tracking system",
      "def": "Similar to a [bug tracking system](#bug_tracker) in that it tracks [issues](#issue) made to a [repository](#repository), usually in the form of [feature requests](#feature_request), [bug reports](#bug_report), or some other to-do item.\n"
    },
    "es": null
  },
  "iterator_pattern": {
    "en": {
      "term": "Iterator pattern",
      "def": "A [design pattern](#design_pattern) in which a temporary [object](#object) or [generator function](#generator_function) produces each value from a collection in turn for processing. This pattern hides the differences between different kinds of data structures so that everything can be processed using loops.\n"
    },
    "es": null
  },
  "join": {
    "en": {
      "term": "join",
      "def": "One of several operations that combine values from two [tables](#table).\n"
    },
    "es": null
  },
  "json": {
    "en": {
      "term": "JavaScript Object Notation",
      "acronym": "JSON",
      "def": "A way to represent data by combining basic values like numbers and character strings in [lists](#list) and [key/value](#dictionary) structures. The acronym stands for \"JavaScript Object Notation\"; unlike better-defined standards like [XML](#xml), it is unencumbered by a syntax for comments or ways to define a [schema](#schema).\n"
    },
    "es": null
  },
  "jupyter": {
    "en": {
      "term": "Jupyter",
      "def": "Project Jupyter is a non-profit, open-source project that was born out of the IPython Project in 2014 as IPython evolved to support interactive [data science](#data_science) and scientific computing in many different programming languages.\n"
    },
    "es": null
  },
  "jupyter_notebook": {
    "en": {
      "term": "Jupyter Notebook",
      "def": "The Jupyter Notebook is an open-source, web-based [computational notebook](#computational_notebook) that allows the user to write and share live code, equations, visualisations, and narrative text.\n"
    },
    "es": null
  },
  "k_means_clustering": {
    "en": {
      "term": "k-means clustering",
      "def": "An [unsupervised_learning](#unsupervised_learning) algorithm that forms *k* groups by repeatedly calculating the [centroid](#centroid) of the current groups and then reallocating data points to the nearest centroid until the centroids no longer move.\n"
    },
    "es": null
  },
  "k_nearest_neighbors": {
    "en": {
      "term": "k-nearest neighbors",
      "def": "A [classification](#classification) algorithm that classifies data points based on their similarity to their *k* nearest neighbours.\n"
    },
    "es": null
  },
  "kebab_case": {
    "en": {
      "term": "kebab case",
      "def": "A naming convention in which the parts of a name are separated with dashes, as in `first-second-third`.\n"
    },
    "es": null
  },
  "key": {
    "en": {
      "term": "key",
      "def": "1. A [field](#field) or combination of fields whose value(s) uniquely identify a [record](#record) within a [table](#table) or dataset. Keys are often used to select specific records and in [joins](#join). 2. Part of a key/value pair, used as a unique identifier in a data structure such as a [dictionary](#dictionary).\n"
    },
    "es": null
  },
  "keyword_argument": {
    "en": {
      "term": "keyword arguments",
      "def": "Extra (often optional) arguments given to a function as key/value pairs.\n"
    },
    "es": null
  },
  "latent_variable": {
    "en": {
      "term": "latent variable",
      "def": "A variable that is not observed directly but instead is inferred from the states or values of other variables.\n"
    },
    "es": null
  },
  "latex": {
    "en": {
      "term": "LaTeX",
      "def": "A typesetting system for document preparation that uses a specialized [markup language](#markup_language) to define a document structure (e.g., headings), stylise text, insert mathematical equations, and manage citations and cross-references. LaTeX is widely used in academia, in particular for scientific papers and theses in mathematics, physics, engineering, and computer science.\n"
    },
    "es": null
  },
  "lazy_evaluation": {
    "en": {
      "term": "lazy evaluation",
      "def": "Delaying evaluation of an expression until the value is actually needed or, in the case of a conditional expression, only evaluating as much of the expression as is necessary. For instance, the second half of `A and B` will only be evaluated if A is [truthy](#truthy).\n"
    },
    "es": null
  },
  "left_join": {
    "en": {
      "term": "left join",
      "def": "A [join](#join) that combines data from two tables, A and B, where [keys](#key) in table A match keys in table B, [fields](#field) are concatenated. Where a key in table A does *not* match a key in table B, columns from table B are filled with [null](#null), [NA](#na), or some other [missing value](#missing_value). Keys from table B that do not match keys from table A are excluded for the result.\n"
    },
    "es": null
  },
  "lexical_scoping": {
    "en": {
      "term": "lexical scoping",
      "def": "To look up the value associated with a name according to the textual structure of a program. Most programming languages use lexical scoping instead of [dynamic scoping](#dynamic_scoping) because the latter is less predictable.\n"
    },
    "es": null
  },
  "library": {
    "en": {
      "term": "library",
      "def": "A reusable software [package](#package), also often called a [module](#module).\n"
    },
    "es": {
      "term": "biblioteca",
      "def": "un paquete de software reutilizable, también  se llama un [módulo](#module).\n"
    }
  },
  "license": {
    "en": {
      "term": "license",
      "def": "A legal document describing how something can be used, and by whom.\n"
    },
    "es": null
  },
  "lifecycle": {
    "en": {
      "term": "lifecycle",
      "def": "The steps that something is allowed or required to go through. The lifecycle of an [object](#object) runs from its [construction](#constructor) through the operations it can or must perform before it is destroyed; the lifecycle of an [issue](#issue) may be: \"created\", \"assigned\", \"in progress\", \"ready for review\", and \"completed\".\n"
    },
    "es": null
  },
  "lift": {
    "en": {
      "term": "lift",
      "def": "How well a model predicts or [classifies](#classification) things, measured as the ratio of the response in the segment identified to the response in the population as a whole. A lift of 1 means the model does no better than chance; higher lift means the model is doing better.\n"
    },
    "es": null
  },
  "line_comment": {
    "en": {
      "term": "line comment",
      "def": "A [comment](#comment) in a program that spans part of a single line, as opposed to a [block comment](#block_comment) that may span multiple lines.\n"
    },
    "es": null
  },
  "linear_regression": {
    "en": {
      "term": "linear regression",
      "def": "A method for finding the best straight-line fit between two datasets, typically by minimizing the squares of the distances between the points and a regression line.\n"
    },
    "es": null
  },
  "linter": {
    "en": {
      "term": "linter",
      "def": "A program that checks for common problems in software, such as violations of indentation rules or variable naming conventions. The name comes from the first tool of its kind, called `lint`.\n"
    },
    "es": null
  },
  "lisp": {
    "en": {
      "term": "Lisp",
      "def": "A family of programming languages that represent programs and data as nested lists. Many other programming languages have borrowed ideas from Lisp.\n"
    },
    "es": null
  },
  "list": {
    "en": {
      "term": "list",
      "def": "A [vector](#vector) that can contain values of many different ([heterogeneous](#heterogeneous)) types.\n"
    },
    "es": null
  },
  "list_comprehension": {
    "en": {
      "term": "list comprehension",
      "def": "In [Python](#python), an expression that creates a new list in place. For example, `[2*x for x in values]` creates a new list whose items are the doubles of those in `values`.\n"
    },
    "es": null
  },
  "literate_programming": {
    "en": {
      "term": "literate programming",
      "def": "A programming paradigm that mixes prose and code.\n"
    },
    "es": null
  },
  "local_installation": {
    "en": {
      "term": "local installation",
      "def": "Placing a [package](#package) inside a particular project so that it is only accessible within that project.\n"
    },
    "es": {
      "term": "instalación local",
      "def": "El acto de ubicar un paquete en un proyecto en particular para que sólo sea accesible dentro de ese proyecto.\n"
    }
  },
  "local_variable": {
    "en": {
      "term": "local variable",
      "def": "A variable defined inside a function which is only visible within that function.\n"
    },
    "es": {
      "term": "variable local",
      "def": "Una variable definida dentro de una función, por lo que solo es visible dentro de ella.\n"
    }
  },
  "log": {
    "en": {
      "term": "log",
      "def": "A record of a program's execution containing [messages](#log_message) written via a [logging framework](#logging_framework) for later inspection.\n"
    },
    "es": null
  },
  "log_message": {
    "en": {
      "term": "log message",
      "def": "A single entry in a [log](#log) of a program's execution. Log messages are usually highly structured so that data (such as the time or the severity) can be recovered later.\n"
    },
    "es": null
  },
  "logging_framework": {
    "en": {
      "term": "logging framework",
      "def": "A software [library](#library) that manages internal reporting for programs.\n"
    },
    "es": null
  },
  "logging_level": {
    "en": {
      "term": "logging level",
      "def": "A setting that controls how much information is generated by a [logging framework](#logging_framework). Typical logging levels include `DEBUG`, `WARNING`, and `ERROR`.\n"
    },
    "es": null
  },
  "logical_indexing": {
    "en": {
      "term": "logical indexing",
      "def": "To index a [vector](#vector) or other structure with a vector of [Booleans](#boolean), keeping only the values that correspond to [true](#true) values. Also referred to as [masking](#masking).\n"
    },
    "es": null
  },
  "logistic_regression": {
    "en": {
      "term": "logistic regression",
      "def": "A method for fitting a model to some data that uses logistic (S-shaped) curves instead of straight lines.\n"
    },
    "es": null
  },
  "long_identifier_git": {
    "en": {
      "term": "long identifier (of commit)",
      "def": "See [full identifier](#full_identifier_git).\n"
    },
    "es": null
  },
  "long_option": {
    "en": {
      "term": "long option",
      "def": "A full-word identifier for a [command-line argument](#command_line_argument). While most common flags are a single letter preceded by a dash, such as `-v`, long options typically use two dashes and a readable name, such as `--verbose`.\n"
    },
    "es": null
  },
  "loop": {
    "en": {
      "term": "loop",
      "def": "A structure that repeatedly executes a section of code until a specific exit condition is met.\n"
    },
    "es": null
  },
  "loop_body": {
    "en": {
      "term": "loop body",
      "def": "The statement or statements executed by a loop.\n"
    },
    "es": null
  },
  "machine_learning": {
    "en": {
      "term": "machine learning",
      "def": "The study or use of algorithms whose performance improves as they are given more data. Machine learning algorithms often use [training data](#training_data) to build a [model](#model). Their performance is then measured by how well they predict the properties of [test data](#test_data).\n"
    },
    "es": null
  },
  "magic_number": {
    "en": {
      "term": "magic number",
      "def": "An unnamed numerical constant that appears in a program without explanation.\n"
    },
    "es": null
  },
  "make": {
    "en": {
      "term": "Make",
      "def": "The original [build manager](#build_manager) for Unix, still in daily use after more than forty years.\n"
    },
    "es": null
  },
  "makefile": {
    "en": {
      "term": "Makefile",
      "def": "A file containing commands for [Make](#make), often actually called `Makefile`.\n"
    },
    "es": null
  },
  "markdown": {
    "en": {
      "term": "Markdown",
      "def": "A [markup language](#markup_language) with a simple syntax intended as a replacement for [HTML](#html). Markdown is often used for README files, and is the basis for [R markdown](#r_markdown).\n"
    },
    "es": null
  },
  "markov_chain": {
    "en": {
      "term": "Markov Chain",
      "def": "Any [model](#model) describing a series of events in which the probability of each event depends only on the current state, not on the path taken to reach that state.\n"
    },
    "es": null
  },
  "markup_language": {
    "en": {
      "term": "markup language",
      "def": "A set of rules for annotating text to define its meaning or how it should be displayed. The markup is usually not displayed, but instead controls how the underlying text is interpreted or shown. [Markdown](#markdown) and [HTML](#html) are widely-used markup languages for web pages.\n"
    },
    "es": null
  },
  "marthas_rules": {
    "en": {
      "term": "Martha's Rules",
      "def": "A simple set of rules for making decisions in small groups.\n"
    },
    "es": null
  },
  "masking": {
    "en": {
      "term": "Masking",
      "def": "[TODO] to be defined"
    },
    "es": null
  },
  "master_branch": {
    "en": {
      "term": "master branch",
      "def": "A dedicated, permanent, central [branch](#branch) which should contain a \"ready product\". After a new feature is developed on a separate branch to avoid breaking the main code, it can be [merged](#git_merge) into the master branch.\n"
    },
    "es": null
  },
  "maximum_likelihood_estimation": {
    "en": {
      "term": "maximum likelihood estimation",
      "def": "To choose the [parameters](#parameter) for a [probability distribution](#probability_distribution) in order to maximize the likelihood of obtaining observed data.\n"
    },
    "es": null
  },
  "mean": {
    "en": {
      "term": "mean",
      "def": "The average value of a dataset, more properly known as the [arithmetic mean](#arithmetic_mean) to distinguish it from the [geometric](#geometric_mean) and [harmonic](#harmonic_mean) means.\n"
    },
    "es": null
  },
  "mean_absolute_error": {
    "en": {
      "term": "mean absolute error",
      "def": "The average error of all predicted values compared with actual values.\n"
    },
    "es": {
      "term": "error absoluto medio",
      "def": "El error promedio de todos los valores predichos en comparación con los valores reales.\n"
    }
  },
  "mean_squared_error": {
    "en": {
      "term": "mean squared error",
      "def": "The average of the squares of all the errors of all predicted values compared with actual values. Squaring makes larger errors count for more, and transforms negative errors into positive values, making this a more popular measure than [mean absolute error](#mean_absolute_error).\n"
    },
    "es": {
      "term": "error cuadrático medio",
      "def": "El promedio de los cuadrados de todos los errores de todos los valores predichos comparados con valores reales. El cuadrado hace que los errores más grandes cuenten más, haciendo esta medida más popular que el [error absoluto medio](#mean_absolute_error).\n"
    }
  },
  "median": {
    "en": {
      "term": "median",
      "def": "A value separating the upper and lower halves of a sorted dataset. The median often gives a better idea of what is typical of the dataset than the [mean](#mean), which can be influenced by a small number of extreme [outliers](#outlier). If the dataset contains an even number of elements, this is the average of the two central elements.\n"
    },
    "es": {
      "term": "mediana",
      "def": "Un valor que separa las mitades superior e inferior de un conjunto de datos ordenado. Frecuentemente, la mediana da una idea mejor de lo que es característico del conjunto de datos que la [media](#mean), que puede estar influenciada por un pequeño número de [valores atípicos](#outlier). Si el conjunto de datos contiene un número par de elementos, este es el promedio de los dos elementos centrales.\n"
    }
  },
  "merge_git": {
    "en": {
      "term": "merge (Git)",
      "def": "See [Git merge](#git_merge)\n"
    },
    "es": null
  },
  "method": {
    "en": {
      "term": "method",
      "def": "An implementation of a [generic function](#generic_function) that handles objects of a specific class.\n"
    },
    "es": {
      "term": "método",
      "def": "Una implementación de una [función genérica](#generic_function) que manipula objetos de una clase específica.\n"
    }
  },
  "milestone": {
    "en": {
      "term": "milestone",
      "def": "A target that a project is trying to meet, often represented as a set of [issues](#issue) that all have to be resolved by a certain time.\n"
    },
    "es": null
  },
  "mime_type": {
    "en": {
      "term": "MIME type",
      "def": "A standard way to identify the contents of files on the internet. The term is an acronym of \"multi-purpose Internet mail extension\", and MIME types are often identified by [filename extensions](#filename_extension), such as `.png` for PNG-formatted images.\n"
    },
    "es": null
  },
  "missing_value": {
    "en": {
      "term": "missing value",
      "def": "A special value such as [null](#null) or [NA](#na) used to indicate the absence of data. Missing values can signal that data was not collected or that the data did not exist in the first place (e.g., the middle name of someone who does not have one).\n"
    },
    "es": null
  },
  "mit_license": {
    "en": {
      "term": "MIT License",
      "def": "A [license](#license) that allows people to re-use software with no restrictions.\n"
    },
    "es": null
  },
  "mock_object": {
    "en": {
      "term": "mock object",
      "def": "A simplified replacement for part of a program whose behavior is easy to control and predict. Mock objects are used in [unit tests](#unit_test) to simulate databases, web services, and other complex systems.\n"
    },
    "es": null
  },
  "mode": {
    "en": {
      "term": "mode",
      "def": "The value, or values, that occurs most frequently in a dataset.\n"
    },
    "es": {
      "term": "moda",
      "def": "El valor que ocurre con más frecuencia en un conjunto de datos.\n"
    }
  },
  "model": {
    "en": {
      "term": "model",
      "def": "A specification of the mathematical relationship between different variables.\n"
    },
    "es": null
  },
  "module": {
    "en": {
      "term": "module",
      "def": "A reusable software [package](#package), also often called a [library](#library).\n"
    },
    "es": {
      "term": "módulo",
      "def": "un paquete de software reutilizable, también se llama una [biblioteca](#library).\n"
    }
  },
  "monte_carlo": {
    "en": {
      "term": "Monte Carlo method",
      "def": "Any method or algorithm that relies on artificially-injected randomness.\n"
    },
    "es": null
  },
  "moving_average": {
    "en": {
      "term": "moving average",
      "def": "The [mean](#mean) of each set of several consecutive values from [time series](#time_series) data.\n"
    },
    "es": null
  },
  "multi_threaded": {
    "en": {
      "term": "multi-threaded",
      "def": "Capable of performing several operations simultaneously. Multi-threaded programs are usually more efficient than [single-threaded](#single_threaded) ones, but also harder to understand and debug.\n"
    },
    "es": null
  },
  "mutation": {
    "en": {
      "term": "mutation",
      "def": "Changing data in place, such as modifying an element of an array or adding a record to a database.\n"
    },
    "es": null
  },
  "n_gram": {
    "en": {
      "term": "n-gram",
      "def": "A sequence of $N$ items, typically words in natural language. For example, a trigram is a sequence of three words. N-grams are often used as input in [computational linguistics](#computational_linguistics).\n"
    },
    "es": null
  },
  "na": {
    "en": {
      "term": "NA",
      "def": "A special value used to represent data that is not available.\n"
    },
    "es": null
  },
  "naive_bayes_classifier": {
    "en": {
      "term": "naive Bayes classifier",
      "def": "Any [classification](#classification) algorithm based on [Bayes' Theorem](#bayes_theorem) that assumes every [feature](#feature_data) being classified is independent of every other feature.\n"
    },
    "es": null
  },
  "name_collision": {
    "en": {
      "term": "name collision",
      "def": "The ambiguity that arises when two or more things in a program that have the same name are active at the same time. Most languages use [namespaces](#namespace) to prevent such collisions.\n"
    },
    "es": null
  },
  "named_argument": {
    "en": {
      "term": "named argument",
      "def": "A function [parameter](#parameter) that is given a value by explicitly naming it in a function call.\n"
    },
    "es": null
  },
  "namespace": {
    "en": {
      "term": "namespace",
      "def": "A collection of names in a program that exists in isolation from other namespaces. Each function, [object](#object), [class](#class), or [module](#module) in a program typically has its own namespace so that references to \"X\" in one part of a program do not accidentally refer to something called \"X\" in another part of the program. Scope is a distinct, but related, concept.\n"
    },
    "es": null
  },
  "nano_editor": {
    "en": {
      "term": "Nano (editor)",
      "def": "A very simple text editor found on most Unix systems.\n"
    },
    "es": null
  },
  "negative_selection": {
    "en": {
      "term": "negative selection",
      "def": "To specify the [elements](#element) of a [vector](#vector) or other data structure that are not desired by negating their indices.\n"
    },
    "es": null
  },
  "neural_network": {
    "en": {
      "term": "neural network",
      "def": "One of a large family of algorithms for identifying patterns in data by mimicking the way neurons interact. A neural network consists of one or more layers of [nodes](#node), each of which is connected to nodes in the preceding and subsequent layer. If enough of a node's inputs are active, that node activates as well.\n"
    },
    "es": null
  },
  "nlp": {
    "en": {
      "term": "natural language processing",
      "acronym": "NLP",
      "def": "See [computational linguistics](#computational_linguistics).\n"
    },
    "es": {
      "term": "procesamiento de lenguaje natural",
      "acronym": "PLN",
      "def": "Ver [lingüística computacional](#computational_linguistics).\n"
    }
  },
  "node": {
    "en": {
      "term": "node",
      "def": "An element of a [graph](#graph) that is connected to other nodes by [edges](#edge). Nodes typically have data associated with them, such as names or weights.\n"
    },
    "es": null
  },
  "non_blocking_execution": {
    "en": {
      "term": "non-blocking execution",
      "def": "To allow a program to continue running while an operation is in progress. For example, many systems support non-blocking execution for file I/O so that the program can continue doing work while it waits for data to be read from or written to the [filesystem](#filesystem) (which is typically much slower than the CPU).\n"
    },
    "es": null
  },
  "normal_distribution": {
    "en": {
      "term": "normal distribution",
      "def": "A continuous random distribution with a symmetric bell-curve shape. As datasets get larger, some of their most important statistical properties can be modeled using a normal distribution.\n"
    },
    "es": null
  },
  "nosql_database": {
    "en": {
      "term": "NoSQL database",
      "def": "Any database that does not use the [relational](#relational_database) model. The name comes from the fact that such databases do not use [SQL](#sql) as a query language.\n"
    },
    "es": null
  },
  "null": {
    "en": {
      "term": "null",
      "def": "A special value used to represent a missing object. Null is not the same as [NA](#na), and neither is it the same as an [empty vector](#empty_vector).\n"
    },
    "es": null
  },
  "null_hypothesis": {
    "en": {
      "term": "null hypothesis",
      "def": "The claim that any patterns seen in data are entirely due to chance. Other claims (e.g., \"X causes Y\") must be much more likely than the null hypothesis in order to be substantiated.\n"
    },
    "es": null
  },
  "nullary_expression": {
    "en": {
      "term": "nullary expression",
      "def": "An \"expression\" with no arguments, such as the value 3.\n"
    },
    "es": null
  },
  "numpy": {
    "en": {
      "term": "numpy",
      "def": "An open source Python package that works with arrays, vectors and matrices of dimension N, in a comparable method and with a syntax similar at Matlab software. You can find functions and sophisticated operations, focused in multidimensional arrays, linear algebra, Fourrier transform and generation of random values.\n"
    },
    "es": {
      "term": "numpy",
      "def": "Es un paquete Python de código abierto que le permite trabajar con arreglos, vectores y matrices de dimensión N, en un método comparable y con una sintaxis similar al software Matlab. Puede encontrar funciones y operaciones sofisticadas, enfocadas en matrices multidimensionales, álgebra lineal, transformada de Fourrier y generación de valores aleatorios.\n"
    }
  },
  "object": {
    "en": {
      "term": "object",
      "def": "In [object-oriented programming](#oop), a structure that contains the data for a specific instance of a [class](#class). The operations the object is capable of are defined by the class's [methods](#method).\n"
    },
    "es": {
      "term": "objeto",
      "def": "En [programación orientada a objetos](#oop), es una estructura que contiene los datos de una instancia específica de una [clase](#class). Las operaciones que son capaces de realizar estos objetos están definidas por los [métodos](#method) de la clase.\n"
    }
  },
  "objective_function": {
    "en": {
      "term": "objective function",
      "def": "A function of one or more variables used to measure or compare the goodness of different solutions in an optimization problem.\n"
    },
    "es": null
  },
  "observation": {
    "en": {
      "term": "observation",
      "def": "A value or property of a specific member of a population.\n"
    },
    "es": null
  },
  "off_by_one_error": {
    "en": {
      "term": "off-by-one error",
      "def": "A common error in programming in which the program refers to element `i` of a structure when it should refer to element `i-1` or `i+1`, or processes `N` elements when it should process `N-1` or `N+1`.\n"
    },
    "es": null
  },
  "oop": {
    "en": {
      "term": "object-oriented programming",
      "acronym": "OOP",
      "def": "A style of programming in which functions and data are bound together in [objects](#object) that only interact with each other through well-defined interfaces.\n"
    },
    "es": {
      "term": "programación orientada a objetos",
      "acronym": "POO",
      "def": "Un paradigma de programación en el cual los datos (atributos) y funciones (métodos) se agrupan en objetos que interactúan entre sí a través de interfaces bien definidas.\n"
    }
  },
  "open_license": {
    "en": {
      "term": "open license",
      "def": "A [license](#license) that permits general re-use, such as the [MIT License](#mit_license) or [GPL](#gpl) for software and [CC-BY](#cc_by) or [CC-0](#cc_0) for data, prose, or other creative outputs.\n"
    },
    "es": {
      "term": "licencia abierta",
      "def": "Una [licencia](#license) que permite reuso en general, tal como la [Licencia MIT](#mit_license)  o [GPL](#gpl) para software y [CC-BY](#cc_by) o [CC-0](#cc_0) para datos, prosas u otros productos creativos.\n"
    }
  },
  "open_science": {
    "en": {
      "term": "open science",
      "def": "A generic term for making scientific software, data, and publications generally available.\n"
    },
    "es": null
  },
  "operating_system": {
    "en": {
      "term": "operating system",
      "def": "A program that provides a standard interface to whatever hardware it is running on. Theoretically, any program that only interacts with the operating system should run on any computer that operating system runs on.\n"
    },
    "es": null
  },
  "optional_parameter": {
    "en": {
      "term": "optional_parameter",
      "def": "A [parameter](#parameter) that does not have to be given a value when a function is called. Most programming languages require programmers to define [default values](#default_value) for optional parameters, or assign them a special value automatically. Arguments passed to optional parameters will often be specified using [keyword arguments](#keyword_argument).\n"
    },
    "es": null
  },
  "orcid": {
    "en": {
      "term": "ORCID",
      "def": "An Open Researcher and Contributor ID that uniquely and persistently identifies an author of scholarly works. ORCIDs are for people what [DOIs](#doi) are for documents.\n"
    },
    "es": null
  },
  "orthogonality": {
    "en": {
      "term": "orthogonality",
      "def": "The ability to use various features of software in any order or combination. Orthogonal systems tend to be easier to understand, since features can be combined without worrying about unexpected interactions.\n"
    },
    "es": null
  },
  "outlier": {
    "en": {
      "term": "outlier",
      "def": "Extreme values that might be measurement or recording errors, or might actually be rare events. Outliers are sometimes ignored when doing statistics, or handled or visualized separately.\n"
    },
    "es": null
  },
  "overfitting": {
    "en": {
      "term": "overfitting",
      "def": "Fitting a [model](#model) so closely to one dataset that it does not generalize to others.\n"
    },
    "es": null
  },
  "p_value": {
    "en": {
      "term": "p value",
      "def": "The probability of obtaining a result at least as strong as the one observed if the [null_hypothesis](#null_hypothesis) is [true](#true) (i.e., if variation is purely due to chance). The lower the p-value, the more likely it is that something other than chance is having an effect.\n"
    },
    "es": null
  },
  "package": {
    "en": {
      "term": "package",
      "def": "A collection of code, data, and documentation that can be distributed and re-used. Also referred to in some languages as a [library](#library) or [module](#module).\n"
    },
    "es": null
  },
  "package_manager": {
    "en": {
      "term": "package manager",
      "def": "A program that does its best to keep track of the different software installed on a computer and their dependencies on one another.\n"
    },
    "es": null
  },
  "pager": {
    "en": {
      "term": "pager",
      "def": "A program that displays a few lines of text at a time.\n"
    },
    "es": null
  },
  "pandas": {
    "en": {
      "term": "pandas",
      "def": "An open source Python package that offers fast, flexible, and expressive data structures to make working with structured data, and time series easy and intuitive. It is a powerful tool for data analysis and data manipulation.\n"
    },
    "es": {
      "term": "pandas",
      "def": "Es un paquete de Python de código abierto que ofrece estructuras de datos rápidas, flexibles y expresivas para que trabajar con series de tiempo estructuradas sea fácil e intuitivo. Se utiliza como una poderosa herramienta para el análisis y la manipulación de datos.\n"
    }
  },
  "parameter": {
    "en": {
      "term": "parameter",
      "def": "A variable specified in a function definition whose value is passed to the function when the function is called. Parameters and arguments are distinct, but related concepts. Parameters are variables and [arguments](#argument) are the values assigned to those variables.\n"
    },
    "es": null
  },
  "parent_class": {
    "en": {
      "term": "parent class",
      "def": "In [object-oriented programming](#oop), the [class](#class) from which a sub class (called the [child class](#child_class)) is derived.\n"
    },
    "es": {
      "term": "superclase",
      "def": "En [programación orientada a objetos](#oop), es la clase a partir de la cual se derivan otras clases (denominadas [subclases](#child_class)).\n"
    }
  },
  "parent_directory": {
    "en": {
      "term": "parent directory",
      "def": "The [directory](#directory) that contains another directory of interest. Going from a directory to its parent, then its parent, and so on eventually leads to the [root directory](#root_directory) of the [filesystem](#filesystem).\n"
    },
    "es": null
  },
  "parent_tree": {
    "en": {
      "term": "parent (in a tree)",
      "def": "A [node](#node) in a [tree](#node) that is above another node (call a [child](#child_tree)). Every node in a tree except the [root node](#root_tree) has a single parent.\n"
    },
    "es": null
  },
  "parse": {
    "en": {
      "term": "parse",
      "def": "To translate the text of a program or web page into a data structure in memory that the program can then manipulate.\n"
    },
    "es": null
  },
  "pass_test": {
    "en": {
      "term": "pass (a test)",
      "def": "A test passes if the [actual result](#actual_result) matches the [expected result](#expected_result).\n"
    },
    "es": null
  },
  "patch": {
    "en": {
      "term": "patch",
      "def": "A single file containing a set of changes to a set of files, separated by markers that indicate where each individual change should be applied.\n"
    },
    "es": null
  },
  "path": {
    "en": {
      "term": "path (in filesystem)",
      "def": "A [string](#string) that specifies a location in a [filesystem](#filesystem). In Unix, the [directories](#directory) in a path are joined using `/`.\n"
    },
    "es": null
  },
  "pattern_rule": {
    "en": {
      "term": "pattern rule",
      "def": "A generic [build rule](#build_rule) that describes how to update any file whose name matches a pattern. Pattern rules often use [automatic variables](#automatic_variable) to represent the actual filenames.\n"
    },
    "es": null
  },
  "peanuts": {
    "en": {
      "term": "Peanuts",
      "def": "An American comic strip by Charles M. Schulz which has inspired the names of [R](#r_language) versions.\n"
    },
    "es": null
  },
  "perceptron": {
    "en": {
      "term": "perceptron",
      "def": "The simplest kind of [neural network])(#neural_network), which approximates a single neuron with _N_ binary inputs by computing a weighted sum of its inputs and firing if that value is zero or greater.\n"
    },
    "es": null
  },
  "permalink": {
    "en": {
      "term": "permalink",
      "def": "Short for \"permanent link\", a URL that is intended to last forever.\n"
    },
    "es": {
      "term": "permalink",
      "def": "Abreviatura de \"enlace permanente\", una URL que se pretende que dure para siempre.\n"
    }
  },
  "phony_target": {
    "en": {
      "term": "phony target",
      "def": "A [build target](#build_target) that does not correspond to an actual file. Phony targets are often used to store commonly used commands in a [Makefile](#makefile).\n"
    },
    "es": null
  },
  "pip": {
    "en": {
      "term": "Pip Install Packages",
      "acronym": "PIP",
      "def": "The standard [package manager](#package_manager) for [Python](#python). pip enables the download and installation of Python packages not included in the standard library.\n"
    },
    "es": null
  },
  "pipe_operator": {
    "en": {
      "term": "pipe operator",
      "def": "The `%>%` used to make the output of one function the input of the next.\n"
    },
    "es": null
  },
  "pipe_shell": {
    "en": {
      "term": "pipe (in the Unix shell)",
      "def": "The `|` used to make the output of one command the input of the next.\n"
    },
    "es": null
  },
  "pivot_table": {
    "en": {
      "term": "pivot table",
      "def": "A technique for summarizing tabular data in which each cell represents the sum, average, or other function of the subset of the original data identified by the cell's row and column heading.\n"
    },
    "es": null
  },
  "plus_one": {
    "en": {
      "term": "+1",
      "def": "A vote in favor of something.\n"
    },
    "es": {
      "term": "+1",
      "def": "Un voto a favor de alguna cosa.\n"
    }
  },
  "poisson_distribution": {
    "en": {
      "term": "Poisson distribution",
      "def": "A [discrete random distribution](#discrete_random_variable) that expresses the probability of $N$ events occurring in a fixed time interval if the events occur at a constant rate, independent of the time since the last event.\n"
    },
    "es": null
  },
  "positional_argument": {
    "en": {
      "term": "positional argument",
      "def": "An argument to a function that gets its value according to its place in the function's definition, as opposed to a named argument that is explicitly matched by name.\n"
    },
    "es": null
  },
  "posterior_distribution": {
    "en": {
      "term": "posterior distribution",
      "def": "Probability distribution summarizing the [prior distribution](#prior_distribution) and the likelihood function."
    },
    "es": null
  },
  "pothole_case": {
    "en": {
      "term": "pothole case",
      "def": "A naming style that separates the parts of a name with underscores, as in `first_second_third`.\n"
    },
    "es": null
  },
  "preamble": {
    "en": {
      "term": "preamble",
      "def": "A series of commands, either placed in the main document, or kept in a separate document, that are included prior to the \\begin{document} command. The preamble defines the type of the document, along with other formatting attributes and parameters. This is also the section of the document where packages are added using the command \\usepackage{} to enable additional functionalities, and where custom commands can be defined.\n"
    },
    "es": null
  },
  "prerequisite": {
    "en": {
      "term": "prerequisite",
      "def": "Something that a [build target](#build_target) depends on.\n"
    },
    "es": null
  },
  "principal_component_analysis": {
    "en": {
      "term": "principal component analysis",
      "acronym": "PCA",
      "def": "An algorithm that find the axis along which data varies most, then the axis that accounts for the largest part of the remaining variation, and so on.\n"
    },
    "es": null
  },
  "prior_distribution": {
    "en": {
      "term": "prior distribution",
      "def": "The [probability distribution](#probability_distribution) that is assumed as a starting point when using [Bayes' Theorem](#bayes_theorem) and used to construct a more accurate [posterior_distribution](#posterior_distribution).\n"
    },
    "es": null
  },
  "prng": {
    "en": {
      "term": "pseudo-random number generator",
      "acronym": "PRNG",
      "def": "A function that can generate [pseudo-random numbers](#pseudo_random_number).\n"
    },
    "es": null
  },
  "probability_distribution": {
    "en": {
      "term": "probability distribution",
      "def": "A mathematical description of all possible outcomes of a random event, and the probability of each occurring.\n"
    },
    "es": null
  },
  "procedural_programming": {
    "en": {
      "term": "procedural programming",
      "def": "A style of programming in which functions operate on data that is passed into them. The term is used in contrast to other programming styles, such as [object-oriented programming](#oop) and [functional programming](#functional_programming).\n"
    },
    "es": null
  },
  "process": {
    "en": {
      "term": "process",
      "def": "An [operating system](#operating_system)'s representation of a running program. A process typically has some memory, the identity of the user who is running it, and a set of connections to open files.\n"
    },
    "es": null
  },
  "product_manager": {
    "en": {
      "term": "product manager",
      "def": "The person responsible for defining what features a product should have.\n"
    },
    "es": null
  },
  "production_code": {
    "en": {
      "term": "production code",
      "def": "Software that is delivered to an end user. The term is used to distinguish such code from test code, deployment infrastructure, and everything else that programmers write along the way.\n"
    },
    "es": null
  },
  "project_manager": {
    "en": {
      "term": "project manager",
      "def": "The person responsible for ensuring that a project moves forward.\n"
    },
    "es": null
  },
  "prompt": {
    "en": {
      "term": "prompt",
      "def": "The text printed by an [REPL](#repl) or [shell](#shell) that indicates it is ready to accept another command. The default prompt in the Unix shell is usually `$`, while in [Python](#python) it is `>>>`, and in [R](#r_language) it is `>`.\n"
    },
    "es": null
  },
  "protocol": {
    "en": {
      "term": "protocol",
      "def": "Any standard specifying how two pieces of software interact. A network protocol such as [HTTP](#http) defines the messages that [clients](#client) and [servers](#server) exchange on the World-Wide Web; [object-oriented](#oop) programs often define protocols for interactions between [objects](#object) of different [classes](#class).\n"
    },
    "es": null
  },
  "provenance": {
    "en": {
      "term": "provenance",
      "def": "A record of where data originally came from and what was done to process it.\n"
    },
    "es": null
  },
  "pseudo_random_number": {
    "en": {
      "term": "pseudo-random number",
      "def": "A value generated in a repeatable way that resembles the [true](#true) randomness of the universe well enough to fool observers.\n"
    },
    "es": {
      "term": "número pseudo-aleatorio",
      "def": "Un valor generado de forma repetible que refleja suficientemente bien a la verdadera aleatoriedad del universo como para engañar a simples observadores mortales.\n"
    }
  },
  "psf": {
    "en": {
      "term": "Python Software Foundation",
      "acronym": "PSF",
      "def": "A non-profit organization that oversees and promotes the development and use of [Python](#python).\n"
    },
    "es": null
  },
  "pull_indexing": {
    "en": {
      "term": "pull indexing",
      "def": "Vectorized indexing in which the value at location `i` in the index [vector](#vector) specifies which [element](#element) of the source vector is being pulled into that location in the result vector, i.e., `result[i] = source[index[i]]`.\n"
    },
    "es": null
  },
  "pull_request": {
    "en": {
      "term": "pull request",
      "def": "The request to merge a new feature or correction created on a user's [fork](#fork) of a [Git](#git) [repository](#repository) into the [upstream repository](#upstream_repository). The developer will be notified of the change, review it, make or suggest changes, and potentially [merge](#git_merge) it.\n"
    },
    "es": null
  },
  "push_indexing": {
    "en": {
      "term": "push indexing",
      "def": "Vectorized indexing in which the value at location `i` in the index [vector](#vector) specifies an [element](#element) of the result vector that gets the corresponding element of the source vector, i.e., `result[index[i]] = source[i]`. Push indexing can easily produce gaps and collisions.\n"
    },
    "es": null
  },
  "pypi": {
    "en": {
      "term": "Python Package Index",
      "acronym": "PyPI",
      "def": "The official third-party software repository for [Python](#python). Anyone can upload a [package](#package) to PyPI. PyPI packages may install via executed scripts or pre-compiled, system-specific wheels.\n"
    },
    "es": null
  },
  "python": {
    "en": {
      "term": "Python",
      "def": "A popular interpreted open-source programming language that relies on indentation to define control structure.\n"
    },
    "es": {
      "term": "Python",
      "def": "Un lenguaje de programación de código abierto interpretado popular que se basa en la sangría para definir la estructura de control.\n"
    }
  },
  "quantile": {
    "en": {
      "term": "quantile",
      "def": "If a set of sorted values are divided into groups of each size, each group is called a quantile. For example, if there are five groups, each is called a *quintile*; the bottom quintile contains the lowest 20% of the values, while the top quintile contains the highest 20%.\n"
    },
    "es": null
  },
  "query_string": {
    "en": {
      "term": "query string",
      "def": "The portion of a [URL](#url) after the question mark `?` that specifies extra parameters for the [HTTP request](#http_request) as name-value pairs.\n"
    },
    "es": null
  },
  "quosure": {
    "en": {
      "term": "quosure",
      "def": "A data structure containing an unevaluated expression and its environment.\n"
    },
    "es": null
  },
  "quoting_function": {
    "en": {
      "term": "quoting function",
      "def": "A function that is passed expressions rather than the values of those expressions.\n"
    },
    "es": null
  },
  "r_consortium": {
    "en": {
      "term": "R Consortium",
      "def": "A group that supports the worldwide community of users, maintainers and developers of [R](#r_language). Its members include leading institutions and companies dedicated to the use, development, and growth of R.\n"
    },
    "es": null
  },
  "r_foundation": {
    "en": {
      "term": "R Foundation",
      "def": "A non-profit founded by the R development core team providing support for [R](#r_language). It is a member of the [R Consortium](#r_consortium).\n"
    },
    "es": null
  },
  "r_hub": {
    "en": {
      "term": "R Hub",
      "def": "A free platform available to check an [R](#r_language) [package](#package) on several different platforms in preparation for the CRAN submission process.\n"
    },
    "es": null
  },
  "r_language": {
    "en": {
      "term": "R (programming language)",
      "def": "A popular open-source programming language used primarily for data science.\n"
    },
    "es": null
  },
  "r_markdown": {
    "en": {
      "term": "R Markdown",
      "def": "A dialect of [Markdown](#markdown) that allows authors to mix prose and code (usually written in [R](#r_language)) in a single document.\n"
    },
    "es": {
      "term": "R Markdown",
      "def": "Un dialecto de [Markdown](#markdown) que permite a sus autores mezclar prosa y código (usualmente escrito en [R](#r_language)) en un mismo documento.\n"
    }
  },
  "raise_exception": {
    "en": {
      "term": "raise (an exception)",
      "def": "To signal that something unexpected or unusual has happened in a program by creating an [exception](#exception) and handing it to the [error-handling](#error_handling) system, which then tries to find a point in the program that will [catch](#catch_exception) it.\n"
    },
    "es": null
  },
  "random_forests": {
    "en": {
      "term": "random forests",
      "def": "An algorithm used for regression or [classification](#classification) that uses a collection of [decision trees](#decision_tree), called a forest. Each tree votes for a classification, and the algorithm chooses the classification having the most votes over all the trees in the forest.\n"
    },
    "es": null
  },
  "raster_image": {
    "en": {
      "term": "raster image",
      "def": "An image stored as a matrix of pixels.\n"
    },
    "es": {
      "term": "imagen rasterizada",
      "def": "Una imagen almacenada como una matriz de píxeles.\n"
    }
  },
  "reactive_programming": {
    "en": {
      "term": "reactive programming",
      "def": "A style of programming in which actions are triggered by external events.\n"
    },
    "es": null
  },
  "reactive_variable": {
    "en": {
      "term": "reactive variable",
      "def": "A variable whose value is automatically updated when some other value or values change. Reactive variables are used extensively in [Shiny](#shiny).\n"
    },
    "es": null
  },
  "readme": {
    "en": {
      "term": "README",
      "def": "A plain text file containing important information about a project or software package.\n"
    },
    "es": null
  },
  "reciprocal": {
    "en": {
      "term": "reciprocal",
      "def": "The reciprocal of a number x is 1 / x, or alternatively x raised to the power of -1.\n"
    },
    "es": null
  },
  "record": {
    "en": {
      "term": "record",
      "def": "A group of related values that are stored together. A record may be represented as a [tuple](#tuple) or as a row in a [table](#table); in the latter case, every record in the table has the same [fields](#field).\n"
    },
    "es": null
  },
  "recursion": {
    "en": {
      "term": "recursion",
      "def": "Calling a function from within a call to that function, or defining a term using a simpler version of the same term.\n"
    },
    "es": null
  },
  "recycle": {
    "en": {
      "term": "recycle",
      "def": "To re-use values from a shorter [vector](#vector) in order to generate a sequence of the same length as a longer one. In [Python](#python) NumPy, this is called broadcasting.\n"
    },
    "es": {
      "term": "reciclar",
      "def": "Reutilizar valores de un vector más corto con el fin de generar una secuencia del mismo largo que el vector más largo.\n"
    }
  },
  "redirection": {
    "en": {
      "term": "redirection",
      "def": "To send a request for a web page or web service to a different page or service.\n"
    },
    "es": null
  },
  "refactoring": {
    "en": {
      "term": "refactoring",
      "def": "Reorganizing software without changing its behavior.\n"
    },
    "es": null
  },
  "regression_testing": {
    "en": {
      "term": "regression testing",
      "def": "Testing software to ensure that things which used to work have not been broken.\n"
    },
    "es": null
  },
  "regular_expression": {
    "en": {
      "term": "regular expression",
      "def": "A pattern for matching text, written as text itself. Regular expressions are sometimes called \"regexp\", \"regex\", or \"RE\", and are powerful tools for working with text.\n"
    },
    "es": {
      "term": "expresión regular",
      "def": "Un patrón para buscar coincidencias en texto, que están a su vez escritas como texto. Las expresiones regulares a veces son llamadas \"regexp\", \"regex\", o \"RE\", y son poderosas.\n"
    }
  },
  "reinforcement_learning": {
    "en": {
      "term": "reinforcement learning",
      "def": "Any [machine learning](#machine_learning) algorithm which is not given specific goals to meet, but instead is given feedback on whether or not it is making progress.\n"
    },
    "es": null
  },
  "relational_database": {
    "en": {
      "term": "relational database",
      "def": "A database that organizes information into [tables](#table), each of which has a fixed set of named [fields](#field) (shown as columns) and a variable number of [records](#record) (shown as rows).\n"
    },
    "es": {
      "term": "base de datos relacional",
      "def": "Una base de datos que organiza la información en [tablas](#table), cada una de las cuales tiene un set fijo de [campos](#field) con nombre (que se muestran como columnas) y un número variable de [registros](#record) (que se muestran como filas).\n"
    }
  },
  "relative_error": {
    "en": {
      "term": "relative error",
      "def": "The absolute value of the difference between the actual and correct value divided by the correct value. For example, if the actual value is 9 and the correct value is 10, the relative error is 0.1. Relative error is usually more useful than [absolute error](#absolute_error).\n"
    },
    "es": {
      "term": "error relativo",
      "def": "El valor absoluto de la diferencia entre el valor observado y el valor correcto, dividido por el valor deseado. Por ejemplo, si el valor observado es 9 y el valor correcto es 10, el error relativo es 0.1. El error relativo suele ser más útil que el [error absoluto](#absolute_error).\n"
    }
  },
  "relative_path": {
    "en": {
      "term": "relative path",
      "def": "A path whose destination is interpreted relative to some other location, such as the [current working directory](#current_working_directory). A relative path is the equivalent of giving directions using terms like \"straight\" and \"left\".\n"
    },
    "es": null
  },
  "relative_row_number": {
    "en": {
      "term": "relative row number",
      "def": "The index of a row in a displayed portion of a table, which may or may not be the same as the [absolute row number](#absolute_row_number) within the table.\n"
    },
    "es": null
  },
  "remote_login": {
    "en": {
      "term": "remote login",
      "def": "Starting an interactive session on one computer from another computer, e.g., by using [SSH](#ssh).\n"
    },
    "es": null
  },
  "remote_repository": {
    "en": {
      "term": "remote repository",
      "def": "A [repository](#repository) located on another computer. Tools such as [Git](#git) are designed to synchronize changes between local and remote repositories in order to share work.\n"
    },
    "es": null
  },
  "repl": {
    "en": {
      "term": "read-eval-print loop",
      "acronym": "REPL",
      "def": "An interactive program that reads a command typed in by a user, executes it, prints the result, and then waits patiently for the next command. REPLs are often used to explore new ideas, or for debugging.\n"
    },
    "es": null
  },
  "repository": {
    "en": {
      "term": "repository",
      "def": "A place where a [version control system](#version_control_system) stores the files that make up a project and the metadata that describes their history.\n"
    },
    "es": {
      "term": "repositorio",
      "def": "Lugar en el que un [sistema de control de versión](#version_control_system) guarda los archivos que conforman un proyecto y los metadatos que describen su historia.\n"
    }
  },
  "reprex": {
    "en": {
      "term": "reprex",
      "def": "A reproducible example. When asking questions about coding problems online or filing issues on [GitHub](#github), you should always include a reprex so others can reproduce your problem and help. The [reprex](https://github.com/tidyverse/reprex) package can help!\n"
    },
    "es": null
  },
  "reproducible_example": {
    "en": {
      "term": "reproducible example",
      "def": "See [reprex](#reprex).\n"
    },
    "es": null
  },
  "reproducible_research": {
    "en": {
      "term": "reproducible research",
      "def": "The practice of describing and documenting research results in such a way that another researcher or person can re-run the analysis code on the same data to obtain the same result.\n"
    },
    "es": null
  },
  "reserved_word": {
    "en": {
      "term": "reserved word",
      "def": "A word (character string) with a distinct meaning for a programming or scripting language. Typically, reserved words cannot be used as names for variables or constants, as this would confuse the compiler or interpreter.\n"
    },
    "es": null
  },
  "restructured_text": {
    "en": {
      "term": "reStructured Text",
      "acronym": "reST",
      "def": "A plaintext [markup](#markup_language) format used primarily in [Python](#python) documentation.\n"
    },
    "es": null
  },
  "revision": {
    "en": {
      "term": "revision",
      "def": "See [commit](#commit).\n"
    },
    "es": null
  },
  "right_join": {
    "en": {
      "term": "right join",
      "def": "A [join](#join) that combines data from two tables, A and B. Where [keys](#key) in table A match keys in table B, [fields](#field) are concatenated. Where a key in table B does *not* match a key in table A, columns from table A are filled with [null](#null), [NA](#na), or some other [missing value](#missing_value) signifier. Keys from table A that do not exist in table B are dropped.\n"
    },
    "es": null
  },
  "root_directory": {
    "en": {
      "term": "root directory",
      "def": "The [directory](#directory) that contains everything else, either directly or indirectly. The root directory is written `/` (a bare forward slash).\n"
    },
    "es": null
  },
  "root_math": {
    "en": {
      "term": "n-th root",
      "def": "The n-th root of a positive number x is the number that when multiplied by itself n times produces x. This can commonly be calculated by raising x to the power of the [reciprocal](#reciprocal) of n.\n"
    },
    "es": null
  },
  "root_mean_squared_error": {
    "en": {
      "term": "root mean squared error",
      "acronym": "RMSE",
      "def": "The [square root](#square_root) of the [mean squared error](#mean_squared_error). Like the [standard deviation](#standard_deviation), it is in the same units as the original data.\n"
    },
    "es": {
      "term": "raíz del error cuadrático medio",
      "acronym": "RECM",
      "def": "La raíz cuadrada del [error cuadrático medio](#mean_squared_error). Como la [desviación estándar](#standard_deviation), está en las mismas unidades que los datos originales.\n"
    }
  },
  "root_tree": {
    "en": {
      "term": "root (in a tree)",
      "def": "The [node](#node) in a [tree](#tree) of which all other nodes are direct or indirect [children](#child_tree), or equivalently the only node in the tree that has no [parent](#parent_tree).\n"
    },
    "es": null
  },
  "rotating_file": {
    "en": {
      "term": "rotating file",
      "def": "A set of files used to store recent information. For example, there might be one file with results for each day of the week, so that results from last Tuesday are overwritten this Tuesday.\n"
    },
    "es": null
  },
  "rse": {
    "en": {
      "term": "research software engineer",
      "acronym": "RSE",
      "def": "Someone whose primary responsibility is to build the specialized software that other researchers depend on.\n"
    },
    "es": null
  },
  "s3": {
    "en": {
      "term": "S3",
      "def": "A framework for [object-oriented programming](#oop) in [R](#r_language).\n"
    },
    "es": {
      "term": "S3",
      "def": "Un entorno para la [programación orientada a objetos](#oop) en [R](#r_language).\n"
    }
  },
  "s4": {
    "en": {
      "term": "S4",
      "def": "A framework for [object-oriented programming](#oop) in [R](#r_language).\n"
    },
    "es": null
  },
  "s_language": {
    "en": {
      "term": "S",
      "def": "A language originally developed in Bell Labs for data analysis, statistical modeling, and graphics. [R](#r_language) is a dialect of S.\n"
    },
    "es": {
      "term": "S",
      "def": "Un lenguaje para análisis de datos, modelado estadístico y gráficos desarrollado originalmente en los Laboratorios Bell. [R](#r_language) es un dialecto de S.\n"
    }
  },
  "sandbox": {
    "en": {
      "term": "sandbox",
      "def": "A testing environment that is separate from the production system, or an environment that is only allowed to perform a restricted set of operations for security reasons.\n"
    },
    "es": null
  },
  "scalar": {
    "en": {
      "term": "scalar",
      "def": "A single value of a particular type, such as 1 or \"a\". Scalars exist in most languages, but do not really exist in [R](#r_language); in R, values that appear to be scalars are actually [vectors](#vector) of unit length.\n"
    },
    "es": {
      "term": "escalar",
      "def": "Un único valor de un tipo particular, como 1 o \"a\". Los escalares realmente no existen en [R](#r_language); los valores que parecen ser escalares son en realidad vectores de largo uno.\n"
    }
  },
  "schema": {
    "en": {
      "term": "schema",
      "def": "A specification of the format of a dataset, including the name, format, and content of each [table](#table).\n"
    },
    "es": null
  },
  "scope": {
    "en": {
      "term": "scope",
      "def": "The portion of a program within which a definition can be seen and used. See [closure](#closure), [global variable](#global_variable), and [local variable](#local_variable).\n"
    },
    "es": null
  },
  "script": {
    "en": {
      "term": "script",
      "def": "Originally, a program written in a language too user-friendly for \"real\" programmers to take seriously; the term is now synonymous with program.\n"
    },
    "es": null
  },
  "search_path": {
    "en": {
      "term": "search path",
      "def": "The list of directories that a program searches to find something. For example, the Unix [shell](#shell) uses the search path stored in the `PATH` variable when trying to find a program whose name it has been given.\n"
    },
    "es": null
  },
  "seed": {
    "en": {
      "term": "seed",
      "def": "A value used to initialize a [pseudo-random number generator](#prng).\n"
    },
    "es": null
  },
  "select": {
    "en": {
      "term": "select",
      "def": "To choose entire columns or rows from a table by name or location.\n"
    },
    "es": null
  },
  "self_join": {
    "en": {
      "term": "self join",
      "def": "A [join](#join) that combines a table with itself.\n"
    },
    "es": null
  },
  "semantic_versioning": {
    "en": {
      "term": "semantic versioning",
      "def": "A standard for identifying software releases. In the version identifier `major.minor.patch`, `major` changes when a new version of software is incompatible with old versions, `minor` changes when new features are added to an existing version, and `patch` changes when small [bugs](#bug) are fixed.\n"
    },
    "es": null
  },
  "sense_vote": {
    "en": {
      "term": "sense vote",
      "def": "A preliminary vote used to determine whether further discussion is needed in a meeting.\n"
    },
    "es": null
  },
  "sequential_data": {
    "en": {
      "term": "sequential data",
      "def": "Any list of data items where the order is an inherent property of the list. Often the next item in the list is dependent on the previous item or items.\n"
    },
    "es": null
  },
  "server": {
    "en": {
      "term": "server",
      "def": "Typically, a program such as a database manager or web server that provides data to a [client](#client) upon request.\n"
    },
    "es": null
  },
  "shebang": {
    "en": {
      "term": "shebang",
      "def": "In Unix, a character sequence such as `#!/usr/bin/python` in the first line of an executable file that tells the [shell](#shell) what program to use to run that file.\n"
    },
    "es": null
  },
  "shell": {
    "en": {
      "term": "shell",
      "def": "A [command-line interface](#cli) that allows a user to interact with the [operating system](#operating_system), such as Bash (for Unix and MacOS) or PowerShell (for Windows).\n"
    },
    "es": null
  },
  "shell_script": {
    "en": {
      "term": "shell script",
      "def": "A set of commands for the [shell](#shell) stored in a file so that they can be re-executed. A shell script is effectively a program.\n"
    },
    "es": null
  },
  "shell_variable": {
    "en": {
      "term": "shell variable",
      "def": "A variable set and used in the [Unix shell](#shell). Commonly used shell variables include `HOME` (the user's home directory) and `PATH` (their [search path](#search_path)).\n"
    },
    "es": null
  },
  "shiny": {
    "en": {
      "term": "Shiny",
      "def": "A [R](#r_language) [package](#package) that makes it simple to build web applications to interactively visualise and manipulate data. Often used to make interactive [graphs](graph) and [tables](#table) straight from [R](#r_language) without having to know [HTML](#html), [CSS](#css) or JavaScript.\n"
    },
    "es": null
  },
  "short_circuit_test": {
    "en": {
      "term": "short circuit test",
      "def": "A logical test that only evaluates as many arguments as it needs to. For example, if `A` is [false](#false), then most languages never evaluate `B` in the expression `A and B`.\n"
    },
    "es": null
  },
  "short_identifier_git": {
    "en": {
      "term": "short identifier (of commit)",
      "def": "The first few characters of a [full identifier](#full_identifier_git). Short identifiers are easy for people to type and say aloud, and are usually unique within a [repository's](#repository) recent history.\n"
    },
    "es": null
  },
  "short_option": {
    "en": {
      "term": "short option",
      "def": "A single-letter identifier for a [command-line argument](#command_line_argument). Most common flags are a single letter preceded by a dash, such as `-v`.\n"
    },
    "es": null
  },
  "side_effect": {
    "en": {
      "term": "side effect",
      "def": "A change made by a function while it runs that is visible after the function finishes, such as modifying a [global variable](#global_variable) or writing to a file. Side effects make programs harder for people to understand, since the effects are not necessarily clear at the point in the program where the function is called.\n"
    },
    "es": null
  },
  "signal": {
    "en": {
      "term": "signal (a condition)",
      "def": "A way of indicating that something has gone wrong in a program, or that some other unexpected event has occurred. [R](#r_language) prefers \"signalling a condition\" to \"raising an exception\". [Python](#python), on the other hand, encourages [raising](#raise_exception) and [catching exceptions](#catch_exception), and in some situations, requires it.\n"
    },
    "es": null
  },
  "single_square_brackets": {
    "en": {
      "term": "single square brackets",
      "def": "One set of square brackets `[ ]`, used to select a structure from another structure based on an index value, or range of values, inside the square brackets.\n"
    },
    "es": null
  },
  "single_threaded": {
    "en": {
      "term": "single-threaded",
      "def": "A model of program execution in which only one thing can happen at a time. Single-threaded execution is easier for people to understand, but less efficient than [multi-threaded](#multi_threaded) execution.\n"
    },
    "es": null
  },
  "singleton": {
    "en": {
      "term": "singleton",
      "def": "A set with only one element, or a [class](#class) with only one [instance](#instance).\n"
    },
    "es": null
  },
  "singleton_pattern": {
    "en": {
      "term": "Singleton pattern",
      "def": "A [design pattern](#design_pattern) that creates a [singleton](#singleton) [object](#object) to manage some resource or service, such as a database or [cache](#cache). In [object-oriented programming](#oop), the pattern is usually implemented by hiding the [constructor](#constructor) of the [class](#class) in some way so that it can only be called once.\n"
    },
    "es": null
  },
  "slug": {
    "en": {
      "term": "slug",
      "def": "An abbreviated portion of a page's URL that uniquely identifies it. In the example `https://www.mysite.com/category/post-name`, the slug is `post-name`.\n"
    },
    "es": null
  },
  "snake_case": {
    "en": {
      "term": "snake case",
      "def": "See [pothole case](#pothole_case).\n"
    },
    "es": null
  },
  "software_distribution": {
    "en": {
      "term": "software distribution",
      "def": "A set of programs that are built, tested, and distributed as a collection so that they can run together.\n"
    },
    "es": null
  },
  "source_code": {
    "en": {
      "term": "source code",
      "def": "Source code or, simply, code, is the origin of executed code (either by means of an interpreter or compiler). It's the primarily human-produced series of commands that make up a program. (Note: Automatic code generators exist for some applications)\n"
    },
    "es": null
  },
  "source_distribution": {
    "en": {
      "term": "source distribution",
      "def": "A [software distribution](#software_distribution) that includes the source code, typically so that programs can be recompiled on the target computer when they are installed.\n"
    },
    "es": null
  },
  "sprint": {
    "en": {
      "term": "sprint",
      "def": "A short, intense period of work on a project.\n"
    },
    "es": null
  },
  "sql": {
    "en": {
      "term": "SQL",
      "def": "The language used for writing queries for a [relational database](#relational_database). The term is an acronym for Structured Query Language.\n"
    },
    "es": {
      "term": "SQL",
      "def": "Lenguaje utilizado para escribir consultas para una [base de datos relacional](#relational_database). El término está un acrónimo del inglés Structured Query Language (Lenguage Estructurado de Consulta).\n"
    }
  },
  "square_root": {
    "en": {
      "term": "Square root",
      "def": "A special case of the [n-th root](#root_math) for which n = 2, i.e. the 2-nd root has the special name \"square root\".\n"
    },
    "es": null
  },
  "ssh": {
    "en": {
      "term": "Secure Shell",
      "acronym": "SSH",
      "def": "A protocol and the program that implements it which allows remote access to a server through a secure channel where all information is encrypted.\n"
    },
    "es": {
      "term": "Secure Shell",
      "acronym": "SSH",
      "def": "Un protocolo y el programa que lo implementa cuya principal función es el acceso remoto a un servidor por medio de un canal seguro en el que toda la información está cifrada.\n"
    }
  },
  "ssh_key": {
    "en": {
      "term": "SSH key",
      "def": "A string of random bits stored in a file that is used to identify a user for [SSH](#ssh). Each SSH key has separate public and private parts; the public part can safely be shared, but if the private part becomes known, the key is compromised.\n"
    },
    "es": null
  },
  "stack_frame": {
    "en": {
      "term": "stack frame",
      "def": "A section of the [call stack](#call_stack) that records details of a single call to a specific function.\n"
    },
    "es": null
  },
  "stack_overflow": {
    "en": {
      "term": "Stack Overflow",
      "def": "A question-and-answer site popular among programmers.\n"
    },
    "es": {
      "term": "Stack Overflow",
      "def": "Un sitio de preguntas y respuestas popular entre personas programadoras.\n"
    }
  },
  "standard_deviation": {
    "en": {
      "term": "standard deviation",
      "def": "How widely values in a dataset differ from the [mean](#mean). It is calculated as the square root of the [variance](#variance).\n"
    },
    "es": {
      "term": "desviación estándar",
      "def": "En qué medida los valores de un conjunto de datos difieren de la [media](#mean). Se calcula como la raíz cuadrada de la [varianza](#variance).\n"
    }
  },
  "standard_normal_distribution": {
    "en": {
      "term": "standard normal distribution",
      "def": "A [normal distribution](#normal_distribution) with a [mean](#mean) of 0 and a [standard deviation](#standard_deviation) of 1. Values from normal distributions with other [parameters](#parameter) can easily be rescaled to be on a standard normal distribution.\n"
    },
    "es": {
      "term": "distribución normal estándar",
      "def": "Una [distribución normal](#normal_distribution) con una [media](#mean) de 0 y una [desviación estándar](#standard_deviation) de 1. Valores de distribuciones normales con otros parámetros se puede reescalar fácilmente para obtener una distribución normal estándar.\n"
    }
  },
  "stderr": {
    "en": {
      "term": "standard error",
      "def": "A predefined communication channel for a [process](#process), typically used for error messages.\n"
    },
    "es": null
  },
  "stdin": {
    "en": {
      "term": "standard input",
      "def": "A predefined communication channel for a [process](#process), typically used to read input from the keyboard or from the previous process in a [pipe](#pipe_shell).\n"
    },
    "es": null
  },
  "stdout": {
    "en": {
      "term": "standard output",
      "def": "A predefined communication channel for a [process](#process), typically used to send output to the screen or to the next process in a [pipe](#pipe_shell).\n"
    },
    "es": null
  },
  "stratified_sampling": {
    "en": {
      "term": "stratified sampling",
      "def": "Selecting values by dividing the overall population into [homogeneous](#homogeneous) groups and then taking a random sample from each group.\n"
    },
    "es": null
  },
  "stream": {
    "en": {
      "term": "stream",
      "def": "A sequential flow of data, such as the [bits](#bit) arriving across a network connection or the bytes read from a file.\n"
    },
    "es": null
  },
  "string": {
    "en": {
      "term": "string",
      "def": "A block of text in a program. The term is short for \"character string\".\n"
    },
    "es": {
      "term": "secuencia de caracteres",
      "def": "Bloque de texto en un programa.\n"
    }
  },
  "string_interpolation": {
    "en": {
      "term": "string interpolation",
      "def": "The process of inserting text corresponding to specified values into a [string](#string), usually to make output human-readable.\n"
    },
    "es": null
  },
  "students_t_distribution": {
    "en": {
      "term": "student's t-distribution",
      "def": "See [t-distribution](#t_distribution).\n"
    },
    "es": null
  },
  "subcommand": {
    "en": {
      "term": "subcommand",
      "def": "A command that is part of a larger family of commands. For example, `git commit` is a subcommand of [Git](#git).\n"
    },
    "es": null
  },
  "subdirectory": {
    "en": {
      "term": "subdirectory",
      "def": "A directory that is below another directory.\n"
    },
    "es": null
  },
  "supervised_learning": {
    "en": {
      "term": "supervised learning",
      "def": "A [machine learning](#machine_learning) algorithm in which a system is taught to [classify](#classification) values given [training data](#training_data) containing previously-classified values.\n"
    },
    "es": null
  },
  "svm": {
    "en": {
      "term": "support vector machine",
      "acronym": "SVM",
      "def": "A [supervised learning](#supervised_learning) algorithm that seeks to divide points in a dataset so that the empty space between the resultant sets is as wide as possible.\n"
    },
    "es": null
  },
  "synchronous": {
    "en": {
      "term": "synchronous",
      "def": "To happen at the same time. In programming, synchronous operations are ones that have to run simultaneously, or complete at the same time.\n"
    },
    "es": null
  },
  "systematic_error": {
    "en": {
      "term": "systematic error",
      "def": "See [bias](#bias).\n"
    },
    "es": null
  },
  "t_distribution": {
    "en": {
      "term": "t-distribution",
      "def": "A variation on the [normal distribution](#normal_distribution) that is adjusted to account for estimating [variance](#variance) from the sample instead of knowing it in advance.\n"
    },
    "es": null
  },
  "tab_completion": {
    "en": {
      "term": "tab completion",
      "def": "A technique implemented by most [REPLs](#repl), [shells](#shell), and programming editors that completes a command, variable name, filename, or other text when the TAB key is pressed.\n"
    },
    "es": null
  },
  "table": {
    "en": {
      "term": "table",
      "def": "A set of [records](#record) in a [relational database](#relational_database) or [observations](#observation) in a [data frame](#data_frame). Tables are usually displayed as rows (each of which represents one record or observation and columns (each of which represents a [field](#field) or [variable](#variable_data).\n"
    },
    "es": null
  },
  "tag": {
    "en": {
      "term": "tag (in version control)",
      "def": "A readable label attached to a specific [commit](#commit) so that it can easily be referenced later.\n"
    },
    "es": null
  },
  "tdd": {
    "en": {
      "term": "test-driven development",
      "acronym": "TDD",
      "def": "A programming practice in which tests are written before a new feature is added or a [bug](#bug) is fixed in order to clarify the goal.\n"
    },
    "es": null
  },
  "template_method_pattern": {
    "en": {
      "term": "Template Method pattern",
      "def": "A [design pattern](#design_pattern) in which a [parent class](#parent_class) defines an overall sequence of operations by calling [abstract methods](#abstract_method) that [child classes](#child_class) must then implement. Each child class then behaves in the same general way, but implements the steps differently.\n"
    },
    "es": null
  },
  "ternary_expression": {
    "en": {
      "term": "ternary expression",
      "def": "An expression that has three parts. [Conditional expressions](#conditional_expression) are the only ternary expressions in most languages.\n"
    },
    "es": null
  },
  "test_data": {
    "en": {
      "term": "test data",
      "def": "Test data is a portion of a dataset used to evaluate the correctness of a [machine learning](#machine_learning) algorithm after it has been trained. It should always be separated from the [training data](#training_data) to ensure that the model is properly tested with unseen data.\n"
    },
    "es": null
  },
  "test_runner": {
    "en": {
      "term": "test runner",
      "def": "A program that finds and runs software tests and reports their results.\n"
    },
    "es": null
  },
  "three_vs": {
    "en": {
      "term": "three Vs",
      "def": "The volume, velocity, and variety that distinguish [big data](#big_data).\n"
    },
    "es": null
  },
  "throw_exception": {
    "en": {
      "term": "throw (exception)",
      "def": "Another term for [raising](#raise_exception) an exception.\n"
    },
    "es": null
  },
  "tibble": {
    "en": {
      "term": "tibble",
      "def": "A modern replacement for [R](#r_language)'s data frame, which stores tabular data in columns and rows, defined and used in the [tidyverse](#tidyverse).\n"
    },
    "es": {
      "term": "tibble",
      "def": "Un remplazo moderno para los data frames de [R](#r_language) que guarda datos tabulares en columnas y filas, definido y usado en el [tidyverse](#tidyverse).\n"
    }
  },
  "ticket": {
    "en": {
      "term": "ticket",
      "def": "See [issue](#issue).\n"
    },
    "es": null
  },
  "ticketing_system": {
    "en": {
      "term": "ticketing system",
      "def": "See [issue tracking system](#issue_tracking_system).\n"
    },
    "es": null
  },
  "tidy_data": {
    "en": {
      "term": "tidy data",
      "def": "Tabular data that satisfies [three conditions](https://vita.had.co.nz/papers/tidy-data.pdf) that facilitate initial cleaning, and later exploration and analysis—(1) each variable forms a column, (2) each observation forms a row, and (3) each type of observation unit forms a table.\n"
    },
    "es": {
      "term": "datos ordenados",
      "def": "Datos tabulares que satisfacen [tres condiciones](https://vita.had.co.nz/papers/tidy-data.pdf) que facilitan su limpieza inicial y su posterior exploración y análisis—(1) cada variable conforma una columna, (2) cada observación conforma una fila y (3) cada tipo de unidad de observación conforma una tabla.\n"
    }
  },
  "tidymodels": {
    "en": {
      "term": "Tidymodels",
      "def": "A collection of [R](#r_language) [packages](#package) for modeling and statistical analysis designed with a [shared philosophy](https://tidymodels.github.io/model-implementation-principles/index.html).\n"
    },
    "es": null
  },
  "tidyverse": {
    "en": {
      "term": "Tidyverse",
      "def": "A collection of [R](#r_language) [packages](#package) for operating on tabular data in consistent ways.\n"
    },
    "es": {
      "term": "Tidyverse",
      "def": "Una colección de paquetes de [R](#r_language) para operar de maneras consistentes con datos tabulares.\n"
    }
  },
  "time_series": {
    "en": {
      "term": "time series",
      "def": "A set of measurements taken at different times, which may or may not be regular intervals.\n"
    },
    "es": null
  },
  "timestamp": {
    "en": {
      "term": "timestamp",
      "def": "A digital identifier showing the time at which something was created or accessed. Timestamps should use [ISO date format](#iso_date_format) for portability.\n"
    },
    "es": null
  },
  "tolerance": {
    "en": {
      "term": "tolerance",
      "def": "How closely the [actual result](#actual_result) of a test must agree with the [expected result](#expected_result) in order for the test to pass. Tolerances are usually expressed in terms of [relative error](#relative_error).\n"
    },
    "es": null
  },
  "training_data": {
    "en": {
      "term": "training data",
      "def": "Training data is a portion of a dataset used to train [machine learning](#machine_learning) algorithm to recognise similar data. It should always be separated from the [test data](#test_data) to ensure that the model is properly tested with data it has never seen before.\n"
    },
    "es": null
  },
  "transitive_dependency": {
    "en": {
      "term": "transitive dependency",
      "def": "If A depends on B and B depends on C, C is a transitive dependency of A.\n"
    },
    "es": null
  },
  "tree": {
    "en": {
      "term": "tree",
      "def": "A [graph](#graph) in which every node except the [root](#root_tree) has exactly one [parent](#parent_tree).\n"
    },
    "es": null
  },
  "triage": {
    "en": {
      "term": "triage",
      "def": "To go through the [issues](#issue) associated with a project and decide which are currently priorities. Triage is one of the key responsibilities of a [project manager](#project_manager).\n"
    },
    "es": null
  },
  "true": {
    "en": {
      "term": "true",
      "def": "The logical ([Boolean](#boolean)) state opposite of \"[false](#false)\". Used in logic and programming to represent a [binary](#binary) state of something.\n"
    },
    "es": null
  },
  "truthy": {
    "en": {
      "term": "truthy",
      "def": "Evaluating to [true](#true) in a [Boolean](#boolean) context.\n"
    },
    "es": null
  },
  "tuple": {
    "en": {
      "term": "tuple",
      "def": "A data type that has a fixed number of parts, such as the three color components of a red-green-blue color specification. In \"[Python](#python)\", tuples are immutable (their values cannot be reset.)\n"
    },
    "es": null
  },
  "two_hard_problems": {
    "en": {
      "term": "two hard problems in computer science",
      "def": "Refers to a quote by Phil Karlton—\"There are only two hard problems in computer science—cache invalidation and naming things.\" Many variations add a third problem (most often \"[off-by-one errors](#off_by_one_error)\").\n"
    },
    "es": null
  },
  "type_coercion": {
    "en": {
      "term": "type coercion",
      "def": "To convert data from one type to another, e.g., from the integer `4` to the equivalent floating point number `4.0`.\n"
    },
    "es": null
  },
  "unary_expression": {
    "en": {
      "term": "unary expression",
      "def": "An expression with one argument, such as `log 5`.\n"
    },
    "es": null
  },
  "unicode": {
    "en": {
      "term": "Unicode",
      "def": "A standard that defines numeric codes for many thousands of characters and symbols. Unicode does not define how those numbers are stored; that is done by standards like [UTF-8](#utf_8).\n"
    },
    "es": null
  },
  "unit_test": {
    "en": {
      "term": "unit test",
      "def": "A test that exercises one function or feature of a piece of software and produces [pass](#pass_test), [fail](#fail_test), or [error](#error_test).\n"
    },
    "es": null
  },
  "unsupervised_learning": {
    "en": {
      "term": "unsupervised learning",
      "def": "Algorithms that [cluster](#clustering) data without knowing in advance what the groups will be.\n"
    },
    "es": null
  },
  "up_vote": {
    "en": {
      "term": "up-vote",
      "def": "A vote in favor of something.\n"
    },
    "es": null
  },
  "update_operator": {
    "en": {
      "term": "update operator",
      "def": "See [in-place operator](#in_place_operator).\n"
    },
    "es": null
  },
  "upstream_repository": {
    "en": {
      "term": "upstream repository",
      "def": "The [remote repository](#remote_repository) from which this [repository](#repository) was derived. Programmers typically save changes in their own repository and then submit a [pull request](#pull_request) to the upstream repository where changes from other programmers are also collected.\n"
    },
    "es": null
  },
  "url": {
    "en": {
      "term": "Uniform Resource Locator",
      "acronym": "URL",
      "def": "A unique address on the World-Wide Web. URLs originally identified web pages, but may also represent datasets or database queries, particularly if they include a [query string](#query_string).\n"
    },
    "es": null
  },
  "utf_8": {
    "en": {
      "term": "UTF-8",
      "def": "A way to store the numeric codes representing [Unicode](#unicode) characters in memory that is [backward-compatible](#backward_compatible) with the older [ASCII](#ascii) standard.\n"
    },
    "es": null
  },
  "variable_arguments": {
    "en": {
      "term": "variable arguments",
      "def": "In a function, the ability to take any number of arguments. [R](#r_language) uses `...` to capture the \"extra\" arguments. [Python](#python) uses `*args` and `**kwargs` to capture unnamed, and named, \"extra\" arguments, respectively.\n"
    },
    "es": null
  },
  "variable_data": {
    "en": {
      "term": "variable (data)",
      "def": "Some attribute of a population that can be measured or observed.\n"
    },
    "es": null
  },
  "variable_program": {
    "en": {
      "term": "variable (program)",
      "def": "A name in a program that has some data associated with it. A variable's value can be changed after definition.\n"
    },
    "es": {
      "term": "variable (programa)",
      "def": "Un nombre en un programa que tiene algunos datos asociados. El valor de una variable se puede cambiar después de su definición.\n"
    }
  },
  "variance": {
    "en": {
      "term": "variance",
      "def": "How widely values in a dataset differ from the [mean](#mean). It is calculated as the average of the squared differences between the values and the mean. The [standard deviation](#standard_deviation) is often used instead, since it has the same units as the data, while the variance is expressed in units squared.\n"
    },
    "es": {
      "term": "varianza",
      "def": "En qué medida los valores de un conjunto de datos difieren de la [media](#mean). Se calcula como el promedio de las diferencias al cuadrado entre los valores y la media. La [desviación estándar](#standard_deviation) se usa a menudo en su lugar, ya que tiene las mismas unidades que los datos, mientras que la varianza se expresa en unidades al cuadrado.\n"
    }
  },
  "vector": {
    "en": {
      "term": "vector",
      "def": "A sequence of values, usually of [homogeneous](#homogeneous) type. Vectors are the fundamental data structure in [R](#r_language); a [scalar](#scalar) is just a vector with exactly one [element](#element).\n"
    },
    "es": {
      "term": "vector",
      "def": "Una secuencia de valores, normalmente de tipo [homogéneo](#homogeneous). Los vectores son la estructura de datos fundamental en [R](#r_language); un [escalar](#scalar) es solo un vector con exactamente un elemento.\n"
    }
  },
  "vectorize": {
    "en": {
      "term": "vectorize",
      "def": "To write code so that operations are performed on entire vectors, rather than element-by-element within loops.\n"
    },
    "es": {
      "term": "vectorizar",
      "def": "Escribir código de modo que las operaciones se ejecuten en vectores completos, más que elemento por elemento dentro de un bucle.\n"
    }
  },
  "version_control_system": {
    "en": {
      "term": "version control system",
      "def": "A system for managing changes made to software during its development.\n"
    },
    "es": {
      "term": "sistema de control de versión",
      "def": "Un sistema para manejar los cambios hechos durante el desarollo de software.\n"
    }
  },
  "vignette": {
    "en": {
      "term": "vignette",
      "def": "A long-form guide used to provide details of a [package](#package) beyond the README.md or function documentation.\n"
    },
    "es": null
  },
  "vim": {
    "en": {
      "term": "Vim (editor)",
      "def": "The default text editor on Unix. Vim is a very powerful text editor, with a steeper learning curve than [nano](#nano_editor), but that allows the user to execute shell commands and use [regular expressions](#regular_expression) to alter files programmatically.\n"
    },
    "es": null
  },
  "virtual_environment": {
    "en": {
      "term": "virtual environment",
      "def": "In [Python](#python), the `virtualenv` [package](#package) allows you to create virtual, disposable, [Python](#python) software environments containing only the packages and versions of packages you want to use for a particular project or task, and to install new packages into the environment without affecting other virtual environments, or the system-wide default environment.\n"
    },
    "es": null
  },
  "virtual_machine": {
    "en": {
      "term": "virtual machine",
      "def": "A program that pretends to be a computer. This may seem a bit redundant, but VMs are quick to create and start up, and changes made inside the virtual machine are contained within that VM so we can install new [packages](#package) or run a completely different operating system without affecting the underlying computer.\n"
    },
    "es": {
      "term": "máquina virtual",
      "def": "Un programa que pretende ser una computadora. Aunque puede parecer redundante, las máquinas virtuales (MV) se crean y se inician rápidamente, y los cambios hechos dentro de la máquina virtual quedan contenidos dentro de esa VM, esto permite que podamos instalar nuevos paquetes o ejecutar un sistema operativo diferente sin afectar la computadora subyacente.\n"
    }
  },
  "visitor_pattern": {
    "en": {
      "term": "Visitor pattern",
      "def": "A [design pattern](#design_pattern) in which the operation to be done is taken to each element of a data structure in turn. It is usually implemented by having a generator \"visitor\" that knows how to reach the structure's elements, which is given a function or method to call for each in turn, and that carries out the specific operation.\n"
    },
    "es": null
  },
  "walk_tree": {
    "en": {
      "term": "walk (a tree)",
      "def": "To visit each [node](#node) in a [tree](#tree) in some order, typically [depth-first](#depth_first) or [breadth-first](#breadth_first).\n"
    },
    "es": null
  },
  "while_loop": {
    "en": {
      "term": "while loop",
      "def": "A statement in a program that repeats one or more other statements (the [loop body](#loop_body)) as long as a condition is [true](#true).\n"
    },
    "es": null
  },
  "whitespace": {
    "en": {
      "term": "whitespace",
      "def": "The space, newline, carriage return, and horizontal and vertical tab characters that take up space but do not create a visible mark. The name comes from their appearance on a printed page in the era of typewriters.\n"
    },
    "es": null
  },
  "wildcard": {
    "en": {
      "term": "wildcard",
      "def": "A character expression that can match text, such as the `*` in `*.csv` (which matches any filename whose name ends with `.csv`).\n"
    },
    "es": null
  },
  "xml": {
    "en": {
      "term": "XML",
      "def": "A set of rules for defining [HTML](#html)-like tags and using them to format documents (typically data). XML was popular in the early 2000s, but its complexity led many programmers to adopt [JSON](#json), instead.\n"
    },
    "es": {
      "term": "XML",
      "def": "Un conjunto de reglas para definir etiquetas similares a [HTML](#html) y usarlas para darle formato a documentos (normalmente datos). XML alcanzó popularidad a principios de la década de 2000, pero su complejidad llevó a muchos programadores a adoptar [JSON](#json) en su lugar.\n"
    }
  },
  "yaml": {
    "en": {
      "term": "YAML",
      "def": "Short for \"YAML Ain't Markup Language\", a way to represent nested data using indentation rather than the parentheses and commas of [JSON](#json). YAML is often used in configuration files and to define [parameters](#parameter) for various flavors of [Markdown](#markdown) documents.\n"
    },
    "es": {
      "term": "YAML",
      "def": "Acrónimo recursivo de \"YAML Ain't Markup Language\" (YAML no es un lenguaje de marcación), es una manera de representar datos anidados usando identación en lugar de paréntesis    y comillas usadas en [JSON](#json). YAML es usado frequentemente en     archivos de configuración y para definir [parámetros](#parameter) en varios estilos de documentos en [Markdown](#markdown).\n"
    }
  }
}
